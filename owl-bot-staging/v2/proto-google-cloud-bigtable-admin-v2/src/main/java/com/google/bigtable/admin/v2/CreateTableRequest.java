// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/bigtable_table_admin.proto

package com.google.bigtable.admin.v2;

/**
 * <pre>
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.CreateTable][google.bigtable.admin.v2.BigtableTableAdmin.CreateTable]
 * </pre>
 *
 * Protobuf type {@code google.bigtable.admin.v2.CreateTableRequest}
 */
public final class CreateTableRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.bigtable.admin.v2.CreateTableRequest)
    CreateTableRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CreateTableRequest.newBuilder() to construct.
  private CreateTableRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CreateTableRequest() {
    parent_ = "";
    tableId_ = "";
    initialSplits_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CreateTableRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.admin.v2.CreateTableRequest.class, com.google.bigtable.admin.v2.CreateTableRequest.Builder.class);
  }

  public interface SplitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.bigtable.admin.v2.CreateTableRequest.Split)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Row key to use as an initial tablet boundary.
     * </pre>
     *
     * <code>bytes key = 1;</code>
     * @return The key.
     */
    com.google.protobuf.ByteString getKey();
  }
  /**
   * <pre>
   * An initial split point for a newly created table.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.admin.v2.CreateTableRequest.Split}
   */
  public static final class Split extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.bigtable.admin.v2.CreateTableRequest.Split)
      SplitOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Split.newBuilder() to construct.
    private Split(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Split() {
      key_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Split();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_Split_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_Split_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.v2.CreateTableRequest.Split.class, com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Row key to use as an initial tablet boundary.
     * </pre>
     *
     * <code>bytes key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!key_.isEmpty()) {
        output.writeBytes(1, key_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!key_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, key_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.bigtable.admin.v2.CreateTableRequest.Split)) {
        return super.equals(obj);
      }
      com.google.bigtable.admin.v2.CreateTableRequest.Split other = (com.google.bigtable.admin.v2.CreateTableRequest.Split) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.bigtable.admin.v2.CreateTableRequest.Split parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.bigtable.admin.v2.CreateTableRequest.Split prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An initial split point for a newly created table.
     * </pre>
     *
     * Protobuf type {@code google.bigtable.admin.v2.CreateTableRequest.Split}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.bigtable.admin.v2.CreateTableRequest.Split)
        com.google.bigtable.admin.v2.CreateTableRequest.SplitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_Split_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_Split_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.bigtable.admin.v2.CreateTableRequest.Split.class, com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder.class);
      }

      // Construct using com.google.bigtable.admin.v2.CreateTableRequest.Split.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        key_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_Split_descriptor;
      }

      @java.lang.Override
      public com.google.bigtable.admin.v2.CreateTableRequest.Split getDefaultInstanceForType() {
        return com.google.bigtable.admin.v2.CreateTableRequest.Split.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.bigtable.admin.v2.CreateTableRequest.Split build() {
        com.google.bigtable.admin.v2.CreateTableRequest.Split result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.bigtable.admin.v2.CreateTableRequest.Split buildPartial() {
        com.google.bigtable.admin.v2.CreateTableRequest.Split result = new com.google.bigtable.admin.v2.CreateTableRequest.Split(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.bigtable.admin.v2.CreateTableRequest.Split result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.key_ = key_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.bigtable.admin.v2.CreateTableRequest.Split) {
          return mergeFrom((com.google.bigtable.admin.v2.CreateTableRequest.Split)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.bigtable.admin.v2.CreateTableRequest.Split other) {
        if (other == com.google.bigtable.admin.v2.CreateTableRequest.Split.getDefaultInstance()) return this;
        if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
          setKey(other.getKey());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                key_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Row key to use as an initial tablet boundary.
       * </pre>
       *
       * <code>bytes key = 1;</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }
      /**
       * <pre>
       * Row key to use as an initial tablet boundary.
       * </pre>
       *
       * <code>bytes key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        key_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Row key to use as an initial tablet boundary.
       * </pre>
       *
       * <code>bytes key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.bigtable.admin.v2.CreateTableRequest.Split)
    }

    // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateTableRequest.Split)
    private static final com.google.bigtable.admin.v2.CreateTableRequest.Split DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.bigtable.admin.v2.CreateTableRequest.Split();
    }

    public static com.google.bigtable.admin.v2.CreateTableRequest.Split getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Split>
        PARSER = new com.google.protobuf.AbstractParser<Split>() {
      @java.lang.Override
      public Split parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Split> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Split> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.bigtable.admin.v2.CreateTableRequest.Split getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int PARENT_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object parent_ = "";
  /**
   * <pre>
   * Required. The unique name of the instance in which to create the table.
   * Values are of the form `projects/{project}/instances/{instance}`.
   * </pre>
   *
   * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The parent.
   */
  @java.lang.Override
  public java.lang.String getParent() {
    java.lang.Object ref = parent_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      parent_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The unique name of the instance in which to create the table.
   * Values are of the form `projects/{project}/instances/{instance}`.
   * </pre>
   *
   * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The bytes for parent.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getParentBytes() {
    java.lang.Object ref = parent_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      parent_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TABLE_ID_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object tableId_ = "";
  /**
   * <pre>
   * Required. The name by which the new table should be referred to within the parent
   * instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
   * Maximum 50 characters.
   * </pre>
   *
   * <code>string table_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The tableId.
   */
  @java.lang.Override
  public java.lang.String getTableId() {
    java.lang.Object ref = tableId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      tableId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The name by which the new table should be referred to within the parent
   * instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
   * Maximum 50 characters.
   * </pre>
   *
   * <code>string table_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The bytes for tableId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTableIdBytes() {
    java.lang.Object ref = tableId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      tableId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TABLE_FIELD_NUMBER = 3;
  private com.google.bigtable.admin.v2.Table table_;
  /**
   * <pre>
   * Required. The Table to create.
   * </pre>
   *
   * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the table field is set.
   */
  @java.lang.Override
  public boolean hasTable() {
    return table_ != null;
  }
  /**
   * <pre>
   * Required. The Table to create.
   * </pre>
   *
   * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The table.
   */
  @java.lang.Override
  public com.google.bigtable.admin.v2.Table getTable() {
    return table_ == null ? com.google.bigtable.admin.v2.Table.getDefaultInstance() : table_;
  }
  /**
   * <pre>
   * Required. The Table to create.
   * </pre>
   *
   * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.bigtable.admin.v2.TableOrBuilder getTableOrBuilder() {
    return table_ == null ? com.google.bigtable.admin.v2.Table.getDefaultInstance() : table_;
  }

  public static final int INITIAL_SPLITS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<com.google.bigtable.admin.v2.CreateTableRequest.Split> initialSplits_;
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (tablets are similar to HBase regions).
   * Given two split keys, `s1` and `s2`, three tablets will be created,
   * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
   * Example:
   * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
   *                `"other", "zz"]`
   * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
   * * Key assignment:
   *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
   *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
   *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
   *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
   *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
   * </pre>
   *
   * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.bigtable.admin.v2.CreateTableRequest.Split> getInitialSplitsList() {
    return initialSplits_;
  }
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (tablets are similar to HBase regions).
   * Given two split keys, `s1` and `s2`, three tablets will be created,
   * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
   * Example:
   * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
   *                `"other", "zz"]`
   * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
   * * Key assignment:
   *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
   *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
   *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
   *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
   *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
   * </pre>
   *
   * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.bigtable.admin.v2.CreateTableRequest.SplitOrBuilder> 
      getInitialSplitsOrBuilderList() {
    return initialSplits_;
  }
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (tablets are similar to HBase regions).
   * Given two split keys, `s1` and `s2`, three tablets will be created,
   * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
   * Example:
   * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
   *                `"other", "zz"]`
   * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
   * * Key assignment:
   *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
   *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
   *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
   *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
   *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
   * </pre>
   *
   * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
   */
  @java.lang.Override
  public int getInitialSplitsCount() {
    return initialSplits_.size();
  }
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (tablets are similar to HBase regions).
   * Given two split keys, `s1` and `s2`, three tablets will be created,
   * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
   * Example:
   * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
   *                `"other", "zz"]`
   * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
   * * Key assignment:
   *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
   *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
   *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
   *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
   *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
   * </pre>
   *
   * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
   */
  @java.lang.Override
  public com.google.bigtable.admin.v2.CreateTableRequest.Split getInitialSplits(int index) {
    return initialSplits_.get(index);
  }
  /**
   * <pre>
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (tablets are similar to HBase regions).
   * Given two split keys, `s1` and `s2`, three tablets will be created,
   * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
   * Example:
   * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
   *                `"other", "zz"]`
   * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
   * * Key assignment:
   *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
   *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
   *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
   *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
   *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
   * </pre>
   *
   * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
   */
  @java.lang.Override
  public com.google.bigtable.admin.v2.CreateTableRequest.SplitOrBuilder getInitialSplitsOrBuilder(
      int index) {
    return initialSplits_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(parent_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, parent_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tableId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, tableId_);
    }
    if (table_ != null) {
      output.writeMessage(3, getTable());
    }
    for (int i = 0; i < initialSplits_.size(); i++) {
      output.writeMessage(4, initialSplits_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(parent_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, parent_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tableId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, tableId_);
    }
    if (table_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getTable());
    }
    for (int i = 0; i < initialSplits_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, initialSplits_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.bigtable.admin.v2.CreateTableRequest)) {
      return super.equals(obj);
    }
    com.google.bigtable.admin.v2.CreateTableRequest other = (com.google.bigtable.admin.v2.CreateTableRequest) obj;

    if (!getParent()
        .equals(other.getParent())) return false;
    if (!getTableId()
        .equals(other.getTableId())) return false;
    if (hasTable() != other.hasTable()) return false;
    if (hasTable()) {
      if (!getTable()
          .equals(other.getTable())) return false;
    }
    if (!getInitialSplitsList()
        .equals(other.getInitialSplitsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PARENT_FIELD_NUMBER;
    hash = (53 * hash) + getParent().hashCode();
    hash = (37 * hash) + TABLE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTableId().hashCode();
    if (hasTable()) {
      hash = (37 * hash) + TABLE_FIELD_NUMBER;
      hash = (53 * hash) + getTable().hashCode();
    }
    if (getInitialSplitsCount() > 0) {
      hash = (37 * hash) + INITIAL_SPLITS_FIELD_NUMBER;
      hash = (53 * hash) + getInitialSplitsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.v2.CreateTableRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.admin.v2.CreateTableRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Request message for
   * [google.bigtable.admin.v2.BigtableTableAdmin.CreateTable][google.bigtable.admin.v2.BigtableTableAdmin.CreateTable]
   * </pre>
   *
   * Protobuf type {@code google.bigtable.admin.v2.CreateTableRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.admin.v2.CreateTableRequest)
      com.google.bigtable.admin.v2.CreateTableRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.v2.CreateTableRequest.class, com.google.bigtable.admin.v2.CreateTableRequest.Builder.class);
    }

    // Construct using com.google.bigtable.admin.v2.CreateTableRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      parent_ = "";
      tableId_ = "";
      table_ = null;
      if (tableBuilder_ != null) {
        tableBuilder_.dispose();
        tableBuilder_ = null;
      }
      if (initialSplitsBuilder_ == null) {
        initialSplits_ = java.util.Collections.emptyList();
      } else {
        initialSplits_ = null;
        initialSplitsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_CreateTableRequest_descriptor;
    }

    @java.lang.Override
    public com.google.bigtable.admin.v2.CreateTableRequest getDefaultInstanceForType() {
      return com.google.bigtable.admin.v2.CreateTableRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.bigtable.admin.v2.CreateTableRequest build() {
      com.google.bigtable.admin.v2.CreateTableRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.bigtable.admin.v2.CreateTableRequest buildPartial() {
      com.google.bigtable.admin.v2.CreateTableRequest result = new com.google.bigtable.admin.v2.CreateTableRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.bigtable.admin.v2.CreateTableRequest result) {
      if (initialSplitsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          initialSplits_ = java.util.Collections.unmodifiableList(initialSplits_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.initialSplits_ = initialSplits_;
      } else {
        result.initialSplits_ = initialSplitsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.bigtable.admin.v2.CreateTableRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.parent_ = parent_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.tableId_ = tableId_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.table_ = tableBuilder_ == null
            ? table_
            : tableBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.admin.v2.CreateTableRequest) {
        return mergeFrom((com.google.bigtable.admin.v2.CreateTableRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.admin.v2.CreateTableRequest other) {
      if (other == com.google.bigtable.admin.v2.CreateTableRequest.getDefaultInstance()) return this;
      if (!other.getParent().isEmpty()) {
        parent_ = other.parent_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getTableId().isEmpty()) {
        tableId_ = other.tableId_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasTable()) {
        mergeTable(other.getTable());
      }
      if (initialSplitsBuilder_ == null) {
        if (!other.initialSplits_.isEmpty()) {
          if (initialSplits_.isEmpty()) {
            initialSplits_ = other.initialSplits_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureInitialSplitsIsMutable();
            initialSplits_.addAll(other.initialSplits_);
          }
          onChanged();
        }
      } else {
        if (!other.initialSplits_.isEmpty()) {
          if (initialSplitsBuilder_.isEmpty()) {
            initialSplitsBuilder_.dispose();
            initialSplitsBuilder_ = null;
            initialSplits_ = other.initialSplits_;
            bitField0_ = (bitField0_ & ~0x00000008);
            initialSplitsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInitialSplitsFieldBuilder() : null;
          } else {
            initialSplitsBuilder_.addAllMessages(other.initialSplits_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              parent_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              tableId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getTableFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              com.google.bigtable.admin.v2.CreateTableRequest.Split m =
                  input.readMessage(
                      com.google.bigtable.admin.v2.CreateTableRequest.Split.parser(),
                      extensionRegistry);
              if (initialSplitsBuilder_ == null) {
                ensureInitialSplitsIsMutable();
                initialSplits_.add(m);
              } else {
                initialSplitsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object parent_ = "";
    /**
     * <pre>
     * Required. The unique name of the instance in which to create the table.
     * Values are of the form `projects/{project}/instances/{instance}`.
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return The parent.
     */
    public java.lang.String getParent() {
      java.lang.Object ref = parent_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parent_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The unique name of the instance in which to create the table.
     * Values are of the form `projects/{project}/instances/{instance}`.
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return The bytes for parent.
     */
    public com.google.protobuf.ByteString
        getParentBytes() {
      java.lang.Object ref = parent_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        parent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The unique name of the instance in which to create the table.
     * Values are of the form `projects/{project}/instances/{instance}`.
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @param value The parent to set.
     * @return This builder for chaining.
     */
    public Builder setParent(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      parent_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The unique name of the instance in which to create the table.
     * Values are of the form `projects/{project}/instances/{instance}`.
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearParent() {
      parent_ = getDefaultInstance().getParent();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The unique name of the instance in which to create the table.
     * Values are of the form `projects/{project}/instances/{instance}`.
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @param value The bytes for parent to set.
     * @return This builder for chaining.
     */
    public Builder setParentBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      parent_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object tableId_ = "";
    /**
     * <pre>
     * Required. The name by which the new table should be referred to within the parent
     * instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
     * Maximum 50 characters.
     * </pre>
     *
     * <code>string table_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The tableId.
     */
    public java.lang.String getTableId() {
      java.lang.Object ref = tableId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tableId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The name by which the new table should be referred to within the parent
     * instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
     * Maximum 50 characters.
     * </pre>
     *
     * <code>string table_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The bytes for tableId.
     */
    public com.google.protobuf.ByteString
        getTableIdBytes() {
      java.lang.Object ref = tableId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The name by which the new table should be referred to within the parent
     * instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
     * Maximum 50 characters.
     * </pre>
     *
     * <code>string table_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The tableId to set.
     * @return This builder for chaining.
     */
    public Builder setTableId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      tableId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The name by which the new table should be referred to within the parent
     * instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
     * Maximum 50 characters.
     * </pre>
     *
     * <code>string table_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearTableId() {
      tableId_ = getDefaultInstance().getTableId();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The name by which the new table should be referred to within the parent
     * instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
     * Maximum 50 characters.
     * </pre>
     *
     * <code>string table_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The bytes for tableId to set.
     * @return This builder for chaining.
     */
    public Builder setTableIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      tableId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.google.bigtable.admin.v2.Table table_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.bigtable.admin.v2.Table, com.google.bigtable.admin.v2.Table.Builder, com.google.bigtable.admin.v2.TableOrBuilder> tableBuilder_;
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the table field is set.
     */
    public boolean hasTable() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The table.
     */
    public com.google.bigtable.admin.v2.Table getTable() {
      if (tableBuilder_ == null) {
        return table_ == null ? com.google.bigtable.admin.v2.Table.getDefaultInstance() : table_;
      } else {
        return tableBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTable(com.google.bigtable.admin.v2.Table value) {
      if (tableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        table_ = value;
      } else {
        tableBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTable(
        com.google.bigtable.admin.v2.Table.Builder builderForValue) {
      if (tableBuilder_ == null) {
        table_ = builderForValue.build();
      } else {
        tableBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeTable(com.google.bigtable.admin.v2.Table value) {
      if (tableBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          table_ != null &&
          table_ != com.google.bigtable.admin.v2.Table.getDefaultInstance()) {
          getTableBuilder().mergeFrom(value);
        } else {
          table_ = value;
        }
      } else {
        tableBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearTable() {
      bitField0_ = (bitField0_ & ~0x00000004);
      table_ = null;
      if (tableBuilder_ != null) {
        tableBuilder_.dispose();
        tableBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.bigtable.admin.v2.Table.Builder getTableBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getTableFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.bigtable.admin.v2.TableOrBuilder getTableOrBuilder() {
      if (tableBuilder_ != null) {
        return tableBuilder_.getMessageOrBuilder();
      } else {
        return table_ == null ?
            com.google.bigtable.admin.v2.Table.getDefaultInstance() : table_;
      }
    }
    /**
     * <pre>
     * Required. The Table to create.
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table table = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.bigtable.admin.v2.Table, com.google.bigtable.admin.v2.Table.Builder, com.google.bigtable.admin.v2.TableOrBuilder> 
        getTableFieldBuilder() {
      if (tableBuilder_ == null) {
        tableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.bigtable.admin.v2.Table, com.google.bigtable.admin.v2.Table.Builder, com.google.bigtable.admin.v2.TableOrBuilder>(
                getTable(),
                getParentForChildren(),
                isClean());
        table_ = null;
      }
      return tableBuilder_;
    }

    private java.util.List<com.google.bigtable.admin.v2.CreateTableRequest.Split> initialSplits_ =
      java.util.Collections.emptyList();
    private void ensureInitialSplitsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        initialSplits_ = new java.util.ArrayList<com.google.bigtable.admin.v2.CreateTableRequest.Split>(initialSplits_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.bigtable.admin.v2.CreateTableRequest.Split, com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder, com.google.bigtable.admin.v2.CreateTableRequest.SplitOrBuilder> initialSplitsBuilder_;

    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public java.util.List<com.google.bigtable.admin.v2.CreateTableRequest.Split> getInitialSplitsList() {
      if (initialSplitsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(initialSplits_);
      } else {
        return initialSplitsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public int getInitialSplitsCount() {
      if (initialSplitsBuilder_ == null) {
        return initialSplits_.size();
      } else {
        return initialSplitsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public com.google.bigtable.admin.v2.CreateTableRequest.Split getInitialSplits(int index) {
      if (initialSplitsBuilder_ == null) {
        return initialSplits_.get(index);
      } else {
        return initialSplitsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder setInitialSplits(
        int index, com.google.bigtable.admin.v2.CreateTableRequest.Split value) {
      if (initialSplitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialSplitsIsMutable();
        initialSplits_.set(index, value);
        onChanged();
      } else {
        initialSplitsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder setInitialSplits(
        int index, com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder builderForValue) {
      if (initialSplitsBuilder_ == null) {
        ensureInitialSplitsIsMutable();
        initialSplits_.set(index, builderForValue.build());
        onChanged();
      } else {
        initialSplitsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder addInitialSplits(com.google.bigtable.admin.v2.CreateTableRequest.Split value) {
      if (initialSplitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialSplitsIsMutable();
        initialSplits_.add(value);
        onChanged();
      } else {
        initialSplitsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder addInitialSplits(
        int index, com.google.bigtable.admin.v2.CreateTableRequest.Split value) {
      if (initialSplitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialSplitsIsMutable();
        initialSplits_.add(index, value);
        onChanged();
      } else {
        initialSplitsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder addInitialSplits(
        com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder builderForValue) {
      if (initialSplitsBuilder_ == null) {
        ensureInitialSplitsIsMutable();
        initialSplits_.add(builderForValue.build());
        onChanged();
      } else {
        initialSplitsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder addInitialSplits(
        int index, com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder builderForValue) {
      if (initialSplitsBuilder_ == null) {
        ensureInitialSplitsIsMutable();
        initialSplits_.add(index, builderForValue.build());
        onChanged();
      } else {
        initialSplitsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder addAllInitialSplits(
        java.lang.Iterable<? extends com.google.bigtable.admin.v2.CreateTableRequest.Split> values) {
      if (initialSplitsBuilder_ == null) {
        ensureInitialSplitsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, initialSplits_);
        onChanged();
      } else {
        initialSplitsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder clearInitialSplits() {
      if (initialSplitsBuilder_ == null) {
        initialSplits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        initialSplitsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public Builder removeInitialSplits(int index) {
      if (initialSplitsBuilder_ == null) {
        ensureInitialSplitsIsMutable();
        initialSplits_.remove(index);
        onChanged();
      } else {
        initialSplitsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder getInitialSplitsBuilder(
        int index) {
      return getInitialSplitsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public com.google.bigtable.admin.v2.CreateTableRequest.SplitOrBuilder getInitialSplitsOrBuilder(
        int index) {
      if (initialSplitsBuilder_ == null) {
        return initialSplits_.get(index);  } else {
        return initialSplitsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public java.util.List<? extends com.google.bigtable.admin.v2.CreateTableRequest.SplitOrBuilder> 
         getInitialSplitsOrBuilderList() {
      if (initialSplitsBuilder_ != null) {
        return initialSplitsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(initialSplits_);
      }
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder addInitialSplitsBuilder() {
      return getInitialSplitsFieldBuilder().addBuilder(
          com.google.bigtable.admin.v2.CreateTableRequest.Split.getDefaultInstance());
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder addInitialSplitsBuilder(
        int index) {
      return getInitialSplitsFieldBuilder().addBuilder(
          index, com.google.bigtable.admin.v2.CreateTableRequest.Split.getDefaultInstance());
    }
    /**
     * <pre>
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (tablets are similar to HBase regions).
     * Given two split keys, `s1` and `s2`, three tablets will be created,
     * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     * Example:
     * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                `"other", "zz"]`
     * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     * * Key assignment:
     *     - Tablet 1 `[, apple)                =&gt; {"a"}.`
     *     - Tablet 2 `[apple, customer_1)      =&gt; {"apple", "custom"}.`
     *     - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.`
     *     - Tablet 4 `[customer_2, other)      =&gt; {"customer_2"}.`
     *     - Tablet 5 `[other, )                =&gt; {"other", "zz"}.`
     * </pre>
     *
     * <code>repeated .google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;</code>
     */
    public java.util.List<com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder> 
         getInitialSplitsBuilderList() {
      return getInitialSplitsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.bigtable.admin.v2.CreateTableRequest.Split, com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder, com.google.bigtable.admin.v2.CreateTableRequest.SplitOrBuilder> 
        getInitialSplitsFieldBuilder() {
      if (initialSplitsBuilder_ == null) {
        initialSplitsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.bigtable.admin.v2.CreateTableRequest.Split, com.google.bigtable.admin.v2.CreateTableRequest.Split.Builder, com.google.bigtable.admin.v2.CreateTableRequest.SplitOrBuilder>(
                initialSplits_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        initialSplits_ = null;
      }
      return initialSplitsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.bigtable.admin.v2.CreateTableRequest)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.CreateTableRequest)
  private static final com.google.bigtable.admin.v2.CreateTableRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.admin.v2.CreateTableRequest();
  }

  public static com.google.bigtable.admin.v2.CreateTableRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CreateTableRequest>
      PARSER = new com.google.protobuf.AbstractParser<CreateTableRequest>() {
    @java.lang.Override
    public CreateTableRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CreateTableRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CreateTableRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.bigtable.admin.v2.CreateTableRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

