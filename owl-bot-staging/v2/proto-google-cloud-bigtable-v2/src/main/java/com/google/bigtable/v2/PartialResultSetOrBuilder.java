// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/data.proto

// Protobuf Java Version: 3.25.3
package com.google.bigtable.v2;

public interface PartialResultSetOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.bigtable.v2.PartialResultSet)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Partial rows in serialized ProtoRows format.
   * </pre>
   *
   * <code>.google.bigtable.v2.ProtoRowsBatch proto_rows_batch = 3;</code>
   * @return Whether the protoRowsBatch field is set.
   */
  boolean hasProtoRowsBatch();
  /**
   * <pre>
   * Partial rows in serialized ProtoRows format.
   * </pre>
   *
   * <code>.google.bigtable.v2.ProtoRowsBatch proto_rows_batch = 3;</code>
   * @return The protoRowsBatch.
   */
  com.google.bigtable.v2.ProtoRowsBatch getProtoRowsBatch();
  /**
   * <pre>
   * Partial rows in serialized ProtoRows format.
   * </pre>
   *
   * <code>.google.bigtable.v2.ProtoRowsBatch proto_rows_batch = 3;</code>
   */
  com.google.bigtable.v2.ProtoRowsBatchOrBuilder getProtoRowsBatchOrBuilder();

  /**
   * <pre>
   * An opaque token sent by the server to allow query resumption and signal
   * the client to accumulate `partial_rows` since the last non-empty
   * `resume_token`. On resumption, the resumed query will return the remaining
   * rows for this query.
   *
   * If there is a batch in progress, a non-empty `resume_token`
   * means that that the batch of `partial_rows` will be complete after merging
   * the `partial_rows` from this response. The client must only yield
   * completed batches to the application, and must ensure that any future
   * retries send the latest token to avoid returning duplicate data.
   *
   * The server may set 'resume_token' without a 'partial_rows'. If there is a
   * batch in progress the client should yield it.
   *
   * The server will also send a sentinel `resume_token` when last batch of
   * `partial_rows` is sent. If the client retries the ExecuteQueryRequest with
   * the sentinel `resume_token`, the server will emit it again without any
   * `partial_rows`, then return OK.
   * </pre>
   *
   * <code>bytes resume_token = 5;</code>
   * @return The resumeToken.
   */
  com.google.protobuf.ByteString getResumeToken();

  /**
   * <pre>
   * Estimated size of a new batch. The server will always set this when
   * returning the first `partial_rows` of a batch, and will not set it at any
   * other time.
   *
   * The client can use this estimate to allocate an initial buffer for the
   * batched results. This helps minimize the number of allocations required,
   * though the buffer size may still need to be increased if the estimate is
   * too low.
   * </pre>
   *
   * <code>int32 estimated_batch_size = 4;</code>
   * @return The estimatedBatchSize.
   */
  int getEstimatedBatchSize();

  com.google.bigtable.v2.PartialResultSet.PartialRowsCase getPartialRowsCase();
}
