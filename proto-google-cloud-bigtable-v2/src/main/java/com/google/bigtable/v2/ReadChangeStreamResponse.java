/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/bigtable.proto

package com.google.bigtable.v2;

/**
 *
 *
 * <pre>
 * NOTE: This API is not generally available. Users must be allowlisted.
 * Response message for Bigtable.ReadChangeStream.
 * </pre>
 *
 * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse}
 */
public final class ReadChangeStreamResponse extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.bigtable.v2.ReadChangeStreamResponse)
    ReadChangeStreamResponseOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ReadChangeStreamResponse.newBuilder() to construct.
  private ReadChangeStreamResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ReadChangeStreamResponse() {}

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(UnusedPrivateParameter unused) {
    return new ReadChangeStreamResponse();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private ReadChangeStreamResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              DataChange.Builder subBuilder = null;
              if (streamRecordCase_ == 1) {
                subBuilder = ((DataChange) streamRecord_).toBuilder();
              }
              streamRecord_ = input.readMessage(DataChange.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((DataChange) streamRecord_);
                streamRecord_ = subBuilder.buildPartial();
              }
              streamRecordCase_ = 1;
              break;
            }
          case 18:
            {
              Heartbeat.Builder subBuilder = null;
              if (streamRecordCase_ == 2) {
                subBuilder = ((Heartbeat) streamRecord_).toBuilder();
              }
              streamRecord_ = input.readMessage(Heartbeat.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((Heartbeat) streamRecord_);
                streamRecord_ = subBuilder.buildPartial();
              }
              streamRecordCase_ = 2;
              break;
            }
          case 26:
            {
              CloseStream.Builder subBuilder = null;
              if (streamRecordCase_ == 3) {
                subBuilder = ((CloseStream) streamRecord_).toBuilder();
              }
              streamRecord_ = input.readMessage(CloseStream.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((CloseStream) streamRecord_);
                streamRecord_ = subBuilder.buildPartial();
              }
              streamRecordCase_ = 3;
              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return BigtableProto.internal_static_google_bigtable_v2_ReadChangeStreamResponse_descriptor;
  }

  @Override
  protected FieldAccessorTable internalGetFieldAccessorTable() {
    return BigtableProto
        .internal_static_google_bigtable_v2_ReadChangeStreamResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(ReadChangeStreamResponse.class, Builder.class);
  }

  public interface MutationChunkOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * If set, then the mutation is a `SetCell` with a chunked value across
     * multiple messages.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
     * </code>
     *
     * @return Whether the chunkInfo field is set.
     */
    boolean hasChunkInfo();
    /**
     *
     *
     * <pre>
     * If set, then the mutation is a `SetCell` with a chunked value across
     * multiple messages.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
     * </code>
     *
     * @return The chunkInfo.
     */
    MutationChunk.ChunkInfo getChunkInfo();
    /**
     *
     *
     * <pre>
     * If set, then the mutation is a `SetCell` with a chunked value across
     * multiple messages.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
     * </code>
     */
    MutationChunk.ChunkInfoOrBuilder getChunkInfoOrBuilder();

    /**
     *
     *
     * <pre>
     * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
     * 0), ignore all fields except the `SetCell`'s value and merge it with
     * the previous message by concatenating the value fields.
     * </pre>
     *
     * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
     *
     * @return Whether the mutation field is set.
     */
    boolean hasMutation();
    /**
     *
     *
     * <pre>
     * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
     * 0), ignore all fields except the `SetCell`'s value and merge it with
     * the previous message by concatenating the value fields.
     * </pre>
     *
     * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
     *
     * @return The mutation.
     */
    Mutation getMutation();
    /**
     *
     *
     * <pre>
     * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
     * 0), ignore all fields except the `SetCell`'s value and merge it with
     * the previous message by concatenating the value fields.
     * </pre>
     *
     * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
     */
    MutationOrBuilder getMutationOrBuilder();
  }
  /**
   *
   *
   * <pre>
   * A partial or complete mutation.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.MutationChunk}
   */
  public static final class MutationChunk extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk)
      MutationChunkOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use MutationChunk.newBuilder() to construct.
    private MutationChunk(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MutationChunk() {}

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(UnusedPrivateParameter unused) {
      return new MutationChunk();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    private MutationChunk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                ChunkInfo.Builder subBuilder = null;
                if (chunkInfo_ != null) {
                  subBuilder = chunkInfo_.toBuilder();
                }
                chunkInfo_ = input.readMessage(ChunkInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(chunkInfo_);
                  chunkInfo_ = subBuilder.buildPartial();
                }

                break;
              }
            case 18:
              {
                Mutation.Builder subBuilder = null;
                if (mutation_ != null) {
                  subBuilder = mutation_.toBuilder();
                }
                mutation_ = input.readMessage(Mutation.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(mutation_);
                  mutation_ = subBuilder.buildPartial();
                }

                break;
              }
            default:
              {
                if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(MutationChunk.class, Builder.class);
    }

    public interface ChunkInfoOrBuilder
        extends
        // @@protoc_insertion_point(interface_extends:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       *
       *
       * <pre>
       * The total value size of all the chunks that make up the `SetCell`.
       * </pre>
       *
       * <code>int32 chunked_value_size = 1;</code>
       *
       * @return The chunkedValueSize.
       */
      int getChunkedValueSize();

      /**
       *
       *
       * <pre>
       * The byte offset of this chunk into the total value size of the
       * mutation.
       * </pre>
       *
       * <code>int32 chunked_value_offset = 2;</code>
       *
       * @return The chunkedValueOffset.
       */
      int getChunkedValueOffset();

      /**
       *
       *
       * <pre>
       * When true, this is the last chunk of a chunked `SetCell`.
       * </pre>
       *
       * <code>bool last_chunk = 3;</code>
       *
       * @return The lastChunk.
       */
      boolean getLastChunk();
    }
    /**
     *
     *
     * <pre>
     * Information about the chunking of this mutation.
     * Only `SetCell` mutations can be chunked, and all chunks for a `SetCell`
     * will be delivered contiguously with no other mutation types interleaved.
     * </pre>
     *
     * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo}
     */
    public static final class ChunkInfo extends com.google.protobuf.GeneratedMessageV3
        implements
        // @@protoc_insertion_point(message_implements:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo)
        ChunkInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      // Use ChunkInfo.newBuilder() to construct.
      private ChunkInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }

      private ChunkInfo() {}

      @Override
      @SuppressWarnings({"unused"})
      protected Object newInstance(UnusedPrivateParameter unused) {
        return new ChunkInfo();
      }

      @Override
      public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
        return this.unknownFields;
      }

      private ChunkInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8:
                {
                  chunkedValueSize_ = input.readInt32();
                  break;
                }
              case 16:
                {
                  chunkedValueOffset_ = input.readInt32();
                  break;
                }
              case 24:
                {
                  lastChunk_ = input.readBool();
                  break;
                }
              default:
                {
                  if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }

      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_ChunkInfo_descriptor;
      }

      @Override
      protected FieldAccessorTable internalGetFieldAccessorTable() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_ChunkInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(ChunkInfo.class, Builder.class);
      }

      public static final int CHUNKED_VALUE_SIZE_FIELD_NUMBER = 1;
      private int chunkedValueSize_;
      /**
       *
       *
       * <pre>
       * The total value size of all the chunks that make up the `SetCell`.
       * </pre>
       *
       * <code>int32 chunked_value_size = 1;</code>
       *
       * @return The chunkedValueSize.
       */
      @Override
      public int getChunkedValueSize() {
        return chunkedValueSize_;
      }

      public static final int CHUNKED_VALUE_OFFSET_FIELD_NUMBER = 2;
      private int chunkedValueOffset_;
      /**
       *
       *
       * <pre>
       * The byte offset of this chunk into the total value size of the
       * mutation.
       * </pre>
       *
       * <code>int32 chunked_value_offset = 2;</code>
       *
       * @return The chunkedValueOffset.
       */
      @Override
      public int getChunkedValueOffset() {
        return chunkedValueOffset_;
      }

      public static final int LAST_CHUNK_FIELD_NUMBER = 3;
      private boolean lastChunk_;
      /**
       *
       *
       * <pre>
       * When true, this is the last chunk of a chunked `SetCell`.
       * </pre>
       *
       * <code>bool last_chunk = 3;</code>
       *
       * @return The lastChunk.
       */
      @Override
      public boolean getLastChunk() {
        return lastChunk_;
      }

      private byte memoizedIsInitialized = -1;

      @Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @Override
      public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
        if (chunkedValueSize_ != 0) {
          output.writeInt32(1, chunkedValueSize_);
        }
        if (chunkedValueOffset_ != 0) {
          output.writeInt32(2, chunkedValueOffset_);
        }
        if (lastChunk_ != false) {
          output.writeBool(3, lastChunk_);
        }
        unknownFields.writeTo(output);
      }

      @Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (chunkedValueSize_ != 0) {
          size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, chunkedValueSize_);
        }
        if (chunkedValueOffset_ != 0) {
          size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, chunkedValueOffset_);
        }
        if (lastChunk_ != false) {
          size += com.google.protobuf.CodedOutputStream.computeBoolSize(3, lastChunk_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @Override
      public boolean equals(final Object obj) {
        if (obj == this) {
          return true;
        }
        if (!(obj instanceof ChunkInfo)) {
          return super.equals(obj);
        }
        ChunkInfo other = (ChunkInfo) obj;

        if (getChunkedValueSize() != other.getChunkedValueSize()) return false;
        if (getChunkedValueOffset() != other.getChunkedValueOffset()) return false;
        if (getLastChunk() != other.getLastChunk()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + CHUNKED_VALUE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getChunkedValueSize();
        hash = (37 * hash) + CHUNKED_VALUE_OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + getChunkedValueOffset();
        hash = (37 * hash) + LAST_CHUNK_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getLastChunk());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static ChunkInfo parseFrom(java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static ChunkInfo parseFrom(
          java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static ChunkInfo parseFrom(com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static ChunkInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static ChunkInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static ChunkInfo parseFrom(
          byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static ChunkInfo parseFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static ChunkInfo parseFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static ChunkInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
      }

      public static ChunkInfo parseDelimitedFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static ChunkInfo parseFrom(com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static ChunkInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      @Override
      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ChunkInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      @Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
      }

      @Override
      protected Builder newBuilderForType(BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       *
       *
       * <pre>
       * Information about the chunking of this mutation.
       * Only `SetCell` mutations can be chunked, and all chunks for a `SetCell`
       * will be delivered contiguously with no other mutation types interleaved.
       * </pre>
       *
       * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo}
       */
      public static final class Builder
          extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
          implements
          // @@protoc_insertion_point(builder_implements:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo)
          ChunkInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
          return BigtableProto
              .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_ChunkInfo_descriptor;
        }

        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
          return BigtableProto
              .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_ChunkInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(ChunkInfo.class, Builder.class);
        }

        // Construct using
        // com.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
        }

        @Override
        public Builder clear() {
          super.clear();
          chunkedValueSize_ = 0;

          chunkedValueOffset_ = 0;

          lastChunk_ = false;

          return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
          return BigtableProto
              .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_ChunkInfo_descriptor;
        }

        @Override
        public ChunkInfo getDefaultInstanceForType() {
          return ChunkInfo.getDefaultInstance();
        }

        @Override
        public ChunkInfo build() {
          ChunkInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @Override
        public ChunkInfo buildPartial() {
          ChunkInfo result = new ChunkInfo(this);
          result.chunkedValueSize_ = chunkedValueSize_;
          result.chunkedValueOffset_ = chunkedValueOffset_;
          result.lastChunk_ = lastChunk_;
          onBuilt();
          return result;
        }

        @Override
        public Builder clone() {
          return super.clone();
        }

        @Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
          return super.setField(field, value);
        }

        @Override
        public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }

        @Override
        public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }

        @Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
          return super.setRepeatedField(field, index, value);
        }

        @Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
          return super.addRepeatedField(field, value);
        }

        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ChunkInfo) {
            return mergeFrom((ChunkInfo) other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ChunkInfo other) {
          if (other == ChunkInfo.getDefaultInstance()) return this;
          if (other.getChunkedValueSize() != 0) {
            setChunkedValueSize(other.getChunkedValueSize());
          }
          if (other.getChunkedValueOffset() != 0) {
            setChunkedValueOffset(other.getChunkedValueOffset());
          }
          if (other.getLastChunk() != false) {
            setLastChunk(other.getLastChunk());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @Override
        public final boolean isInitialized() {
          return true;
        }

        @Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ChunkInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ChunkInfo) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int chunkedValueSize_;
        /**
         *
         *
         * <pre>
         * The total value size of all the chunks that make up the `SetCell`.
         * </pre>
         *
         * <code>int32 chunked_value_size = 1;</code>
         *
         * @return The chunkedValueSize.
         */
        @Override
        public int getChunkedValueSize() {
          return chunkedValueSize_;
        }
        /**
         *
         *
         * <pre>
         * The total value size of all the chunks that make up the `SetCell`.
         * </pre>
         *
         * <code>int32 chunked_value_size = 1;</code>
         *
         * @param value The chunkedValueSize to set.
         * @return This builder for chaining.
         */
        public Builder setChunkedValueSize(int value) {

          chunkedValueSize_ = value;
          onChanged();
          return this;
        }
        /**
         *
         *
         * <pre>
         * The total value size of all the chunks that make up the `SetCell`.
         * </pre>
         *
         * <code>int32 chunked_value_size = 1;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearChunkedValueSize() {

          chunkedValueSize_ = 0;
          onChanged();
          return this;
        }

        private int chunkedValueOffset_;
        /**
         *
         *
         * <pre>
         * The byte offset of this chunk into the total value size of the
         * mutation.
         * </pre>
         *
         * <code>int32 chunked_value_offset = 2;</code>
         *
         * @return The chunkedValueOffset.
         */
        @Override
        public int getChunkedValueOffset() {
          return chunkedValueOffset_;
        }
        /**
         *
         *
         * <pre>
         * The byte offset of this chunk into the total value size of the
         * mutation.
         * </pre>
         *
         * <code>int32 chunked_value_offset = 2;</code>
         *
         * @param value The chunkedValueOffset to set.
         * @return This builder for chaining.
         */
        public Builder setChunkedValueOffset(int value) {

          chunkedValueOffset_ = value;
          onChanged();
          return this;
        }
        /**
         *
         *
         * <pre>
         * The byte offset of this chunk into the total value size of the
         * mutation.
         * </pre>
         *
         * <code>int32 chunked_value_offset = 2;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearChunkedValueOffset() {

          chunkedValueOffset_ = 0;
          onChanged();
          return this;
        }

        private boolean lastChunk_;
        /**
         *
         *
         * <pre>
         * When true, this is the last chunk of a chunked `SetCell`.
         * </pre>
         *
         * <code>bool last_chunk = 3;</code>
         *
         * @return The lastChunk.
         */
        @Override
        public boolean getLastChunk() {
          return lastChunk_;
        }
        /**
         *
         *
         * <pre>
         * When true, this is the last chunk of a chunked `SetCell`.
         * </pre>
         *
         * <code>bool last_chunk = 3;</code>
         *
         * @param value The lastChunk to set.
         * @return This builder for chaining.
         */
        public Builder setLastChunk(boolean value) {

          lastChunk_ = value;
          onChanged();
          return this;
        }
        /**
         *
         *
         * <pre>
         * When true, this is the last chunk of a chunked `SetCell`.
         * </pre>
         *
         * <code>bool last_chunk = 3;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearLastChunk() {

          lastChunk_ = false;
          onChanged();
          return this;
        }

        @Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo)
      }

      // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo)
      private static final ChunkInfo DEFAULT_INSTANCE;

      static {
        DEFAULT_INSTANCE = new ChunkInfo();
      }

      public static ChunkInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ChunkInfo> PARSER =
          new com.google.protobuf.AbstractParser<ChunkInfo>() {
            @Override
            public ChunkInfo parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              return new ChunkInfo(input, extensionRegistry);
            }
          };

      public static com.google.protobuf.Parser<ChunkInfo> parser() {
        return PARSER;
      }

      @Override
      public com.google.protobuf.Parser<ChunkInfo> getParserForType() {
        return PARSER;
      }

      @Override
      public ChunkInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }
    }

    public static final int CHUNK_INFO_FIELD_NUMBER = 1;
    private ChunkInfo chunkInfo_;
    /**
     *
     *
     * <pre>
     * If set, then the mutation is a `SetCell` with a chunked value across
     * multiple messages.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
     * </code>
     *
     * @return Whether the chunkInfo field is set.
     */
    @Override
    public boolean hasChunkInfo() {
      return chunkInfo_ != null;
    }
    /**
     *
     *
     * <pre>
     * If set, then the mutation is a `SetCell` with a chunked value across
     * multiple messages.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
     * </code>
     *
     * @return The chunkInfo.
     */
    @Override
    public ChunkInfo getChunkInfo() {
      return chunkInfo_ == null ? ChunkInfo.getDefaultInstance() : chunkInfo_;
    }
    /**
     *
     *
     * <pre>
     * If set, then the mutation is a `SetCell` with a chunked value across
     * multiple messages.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
     * </code>
     */
    @Override
    public ChunkInfoOrBuilder getChunkInfoOrBuilder() {
      return getChunkInfo();
    }

    public static final int MUTATION_FIELD_NUMBER = 2;
    private Mutation mutation_;
    /**
     *
     *
     * <pre>
     * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
     * 0), ignore all fields except the `SetCell`'s value and merge it with
     * the previous message by concatenating the value fields.
     * </pre>
     *
     * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
     *
     * @return Whether the mutation field is set.
     */
    @Override
    public boolean hasMutation() {
      return mutation_ != null;
    }
    /**
     *
     *
     * <pre>
     * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
     * 0), ignore all fields except the `SetCell`'s value and merge it with
     * the previous message by concatenating the value fields.
     * </pre>
     *
     * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
     *
     * @return The mutation.
     */
    @Override
    public Mutation getMutation() {
      return mutation_ == null ? Mutation.getDefaultInstance() : mutation_;
    }
    /**
     *
     *
     * <pre>
     * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
     * 0), ignore all fields except the `SetCell`'s value and merge it with
     * the previous message by concatenating the value fields.
     * </pre>
     *
     * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
     */
    @Override
    public MutationOrBuilder getMutationOrBuilder() {
      return getMutation();
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (chunkInfo_ != null) {
        output.writeMessage(1, getChunkInfo());
      }
      if (mutation_ != null) {
        output.writeMessage(2, getMutation());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (chunkInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getChunkInfo());
      }
      if (mutation_ != null) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getMutation());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof MutationChunk)) {
        return super.equals(obj);
      }
      MutationChunk other = (MutationChunk) obj;

      if (hasChunkInfo() != other.hasChunkInfo()) return false;
      if (hasChunkInfo()) {
        if (!getChunkInfo().equals(other.getChunkInfo())) return false;
      }
      if (hasMutation() != other.hasMutation()) return false;
      if (hasMutation()) {
        if (!getMutation().equals(other.getMutation())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasChunkInfo()) {
        hash = (37 * hash) + CHUNK_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getChunkInfo().hashCode();
      }
      if (hasMutation()) {
        hash = (37 * hash) + MUTATION_FIELD_NUMBER;
        hash = (53 * hash) + getMutation().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static MutationChunk parseFrom(java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static MutationChunk parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static MutationChunk parseFrom(com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static MutationChunk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static MutationChunk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static MutationChunk parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static MutationChunk parseFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static MutationChunk parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static MutationChunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static MutationChunk parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static MutationChunk parseFrom(com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static MutationChunk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(MutationChunk prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * A partial or complete mutation.
     * </pre>
     *
     * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.MutationChunk}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk)
        MutationChunkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_descriptor;
      }

      @Override
      protected FieldAccessorTable internalGetFieldAccessorTable() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(MutationChunk.class, Builder.class);
      }

      // Construct using com.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
      }

      @Override
      public Builder clear() {
        super.clear();
        if (chunkInfoBuilder_ == null) {
          chunkInfo_ = null;
        } else {
          chunkInfo_ = null;
          chunkInfoBuilder_ = null;
        }
        if (mutationBuilder_ == null) {
          mutation_ = null;
        } else {
          mutation_ = null;
          mutationBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_MutationChunk_descriptor;
      }

      @Override
      public MutationChunk getDefaultInstanceForType() {
        return MutationChunk.getDefaultInstance();
      }

      @Override
      public MutationChunk build() {
        MutationChunk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public MutationChunk buildPartial() {
        MutationChunk result = new MutationChunk(this);
        if (chunkInfoBuilder_ == null) {
          result.chunkInfo_ = chunkInfo_;
        } else {
          result.chunkInfo_ = chunkInfoBuilder_.build();
        }
        if (mutationBuilder_ == null) {
          result.mutation_ = mutation_;
        } else {
          result.mutation_ = mutationBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }

      @Override
      public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.setField(field, value);
      }

      @Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.addRepeatedField(field, value);
      }

      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MutationChunk) {
          return mergeFrom((MutationChunk) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MutationChunk other) {
        if (other == MutationChunk.getDefaultInstance()) return this;
        if (other.hasChunkInfo()) {
          mergeChunkInfo(other.getChunkInfo());
        }
        if (other.hasMutation()) {
          mergeMutation(other.getMutation());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MutationChunk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MutationChunk) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private ChunkInfo chunkInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
              ChunkInfo, ChunkInfo.Builder, ChunkInfoOrBuilder>
          chunkInfoBuilder_;
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       *
       * @return Whether the chunkInfo field is set.
       */
      public boolean hasChunkInfo() {
        return chunkInfoBuilder_ != null || chunkInfo_ != null;
      }
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       *
       * @return The chunkInfo.
       */
      public ChunkInfo getChunkInfo() {
        if (chunkInfoBuilder_ == null) {
          return chunkInfo_ == null ? ChunkInfo.getDefaultInstance() : chunkInfo_;
        } else {
          return chunkInfoBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       */
      public Builder setChunkInfo(ChunkInfo value) {
        if (chunkInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chunkInfo_ = value;
          onChanged();
        } else {
          chunkInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       */
      public Builder setChunkInfo(ChunkInfo.Builder builderForValue) {
        if (chunkInfoBuilder_ == null) {
          chunkInfo_ = builderForValue.build();
          onChanged();
        } else {
          chunkInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       */
      public Builder mergeChunkInfo(ChunkInfo value) {
        if (chunkInfoBuilder_ == null) {
          if (chunkInfo_ != null) {
            chunkInfo_ = ChunkInfo.newBuilder(chunkInfo_).mergeFrom(value).buildPartial();
          } else {
            chunkInfo_ = value;
          }
          onChanged();
        } else {
          chunkInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       */
      public Builder clearChunkInfo() {
        if (chunkInfoBuilder_ == null) {
          chunkInfo_ = null;
          onChanged();
        } else {
          chunkInfo_ = null;
          chunkInfoBuilder_ = null;
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       */
      public ChunkInfo.Builder getChunkInfoBuilder() {

        onChanged();
        return getChunkInfoFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       */
      public ChunkInfoOrBuilder getChunkInfoOrBuilder() {
        if (chunkInfoBuilder_ != null) {
          return chunkInfoBuilder_.getMessageOrBuilder();
        } else {
          return chunkInfo_ == null ? ChunkInfo.getDefaultInstance() : chunkInfo_;
        }
      }
      /**
       *
       *
       * <pre>
       * If set, then the mutation is a `SetCell` with a chunked value across
       * multiple messages.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.MutationChunk.ChunkInfo chunk_info = 1;
       * </code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              ChunkInfo, ChunkInfo.Builder, ChunkInfoOrBuilder>
          getChunkInfoFieldBuilder() {
        if (chunkInfoBuilder_ == null) {
          chunkInfoBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  ChunkInfo, ChunkInfo.Builder, ChunkInfoOrBuilder>(
                  getChunkInfo(), getParentForChildren(), isClean());
          chunkInfo_ = null;
        }
        return chunkInfoBuilder_;
      }

      private Mutation mutation_;
      private com.google.protobuf.SingleFieldBuilderV3<
              Mutation, Mutation.Builder, MutationOrBuilder>
          mutationBuilder_;
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       *
       * @return Whether the mutation field is set.
       */
      public boolean hasMutation() {
        return mutationBuilder_ != null || mutation_ != null;
      }
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       *
       * @return The mutation.
       */
      public Mutation getMutation() {
        if (mutationBuilder_ == null) {
          return mutation_ == null ? Mutation.getDefaultInstance() : mutation_;
        } else {
          return mutationBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       */
      public Builder setMutation(Mutation value) {
        if (mutationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mutation_ = value;
          onChanged();
        } else {
          mutationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       */
      public Builder setMutation(Mutation.Builder builderForValue) {
        if (mutationBuilder_ == null) {
          mutation_ = builderForValue.build();
          onChanged();
        } else {
          mutationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       */
      public Builder mergeMutation(Mutation value) {
        if (mutationBuilder_ == null) {
          if (mutation_ != null) {
            mutation_ = Mutation.newBuilder(mutation_).mergeFrom(value).buildPartial();
          } else {
            mutation_ = value;
          }
          onChanged();
        } else {
          mutationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       */
      public Builder clearMutation() {
        if (mutationBuilder_ == null) {
          mutation_ = null;
          onChanged();
        } else {
          mutation_ = null;
          mutationBuilder_ = null;
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       */
      public Mutation.Builder getMutationBuilder() {

        onChanged();
        return getMutationFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       */
      public MutationOrBuilder getMutationOrBuilder() {
        if (mutationBuilder_ != null) {
          return mutationBuilder_.getMessageOrBuilder();
        } else {
          return mutation_ == null ? Mutation.getDefaultInstance() : mutation_;
        }
      }
      /**
       *
       *
       * <pre>
       * If this is a continuation of a chunked message (`chunked_value_offset` &gt;
       * 0), ignore all fields except the `SetCell`'s value and merge it with
       * the previous message by concatenating the value fields.
       * </pre>
       *
       * <code>.google.bigtable.v2.Mutation mutation = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              Mutation, Mutation.Builder, MutationOrBuilder>
          getMutationFieldBuilder() {
        if (mutationBuilder_ == null) {
          mutationBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  Mutation, Mutation.Builder, MutationOrBuilder>(
                  getMutation(), getParentForChildren(), isClean());
          mutation_ = null;
        }
        return mutationBuilder_;
      }

      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk)
    }

    // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.MutationChunk)
    private static final MutationChunk DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new MutationChunk();
    }

    public static MutationChunk getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MutationChunk> PARSER =
        new com.google.protobuf.AbstractParser<MutationChunk>() {
          @Override
          public MutationChunk parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new MutationChunk(input, extensionRegistry);
          }
        };

    public static com.google.protobuf.Parser<MutationChunk> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<MutationChunk> getParserForType() {
      return PARSER;
    }

    @Override
    public MutationChunk getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface DataChangeOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.bigtable.v2.ReadChangeStreamResponse.DataChange)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * The type of the mutation.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
     *
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     *
     *
     * <pre>
     * The type of the mutation.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
     *
     * @return The type.
     */
    DataChange.Type getType();

    /**
     *
     *
     * <pre>
     * The cluster where the mutation was applied.
     * Not set when `type` is `GARBAGE_COLLECTION`.
     * </pre>
     *
     * <code>string source_cluster_id = 2;</code>
     *
     * @return The sourceClusterId.
     */
    String getSourceClusterId();
    /**
     *
     *
     * <pre>
     * The cluster where the mutation was applied.
     * Not set when `type` is `GARBAGE_COLLECTION`.
     * </pre>
     *
     * <code>string source_cluster_id = 2;</code>
     *
     * @return The bytes for sourceClusterId.
     */
    com.google.protobuf.ByteString getSourceClusterIdBytes();

    /**
     *
     *
     * <pre>
     * The row key for all mutations that are part of this `DataChange`.
     * If the `DataChange` is chunked across multiple messages, then this field
     * will only be set for the first message.
     * </pre>
     *
     * <code>bytes row_key = 3;</code>
     *
     * @return The rowKey.
     */
    com.google.protobuf.ByteString getRowKey();

    /**
     *
     *
     * <pre>
     * The timestamp at which the mutation was applied on the Bigtable server.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
     *
     * @return Whether the commitTimestamp field is set.
     */
    boolean hasCommitTimestamp();
    /**
     *
     *
     * <pre>
     * The timestamp at which the mutation was applied on the Bigtable server.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
     *
     * @return The commitTimestamp.
     */
    com.google.protobuf.Timestamp getCommitTimestamp();
    /**
     *
     *
     * <pre>
     * The timestamp at which the mutation was applied on the Bigtable server.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
     */
    com.google.protobuf.TimestampOrBuilder getCommitTimestampOrBuilder();

    /**
     *
     *
     * <pre>
     * A value that lets stream consumers reconstruct Bigtable's
     * conflict resolution semantics.
     * https://cloud.google.com/bigtable/docs/writes#conflict-resolution
     * In the event that the same row key, column family, column qualifier,
     * timestamp are modified on different clusters at the same
     * `commit_timestamp`, the mutation with the larger `tiebreaker` will be the
     * one chosen for the eventually consistent state of the system.
     * </pre>
     *
     * <code>int32 tiebreaker = 5;</code>
     *
     * @return The tiebreaker.
     */
    int getTiebreaker();

    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    java.util.List<MutationChunk> getChunksList();
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    MutationChunk getChunks(int index);
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    int getChunksCount();
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    java.util.List<? extends MutationChunkOrBuilder> getChunksOrBuilderList();
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    MutationChunkOrBuilder getChunksOrBuilder(int index);

    /**
     *
     *
     * <pre>
     * When true, indicates that the entire `DataChange` has been read
     * and the client can safely process the message.
     * </pre>
     *
     * <code>bool done = 8;</code>
     *
     * @return The done.
     */
    boolean getDone();

    /**
     *
     *
     * <pre>
     * An encoded position for this stream's partition to restart reading from.
     * This token is for the StreamPartition from the request.
     * </pre>
     *
     * <code>string token = 9;</code>
     *
     * @return The token.
     */
    String getToken();
    /**
     *
     *
     * <pre>
     * An encoded position for this stream's partition to restart reading from.
     * This token is for the StreamPartition from the request.
     * </pre>
     *
     * <code>string token = 9;</code>
     *
     * @return The bytes for token.
     */
    com.google.protobuf.ByteString getTokenBytes();

    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
     *
     * @return Whether the lowWatermark field is set.
     */
    boolean hasLowWatermark();
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
     *
     * @return The lowWatermark.
     */
    com.google.protobuf.Timestamp getLowWatermark();
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
     */
    com.google.protobuf.TimestampOrBuilder getLowWatermarkOrBuilder();
  }
  /**
   *
   *
   * <pre>
   * A message corresponding to one or more mutations to the partition
   * being streamed. A single logical `DataChange` message may also be split
   * across a sequence of multiple individual messages. Messages other than
   * the first in a sequence will only have the `type` and `chunks` fields
   * populated, with the final message in the sequence also containing `done`
   * set to true.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.DataChange}
   */
  public static final class DataChange extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.bigtable.v2.ReadChangeStreamResponse.DataChange)
      DataChangeOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use DataChange.newBuilder() to construct.
    private DataChange(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private DataChange() {
      type_ = 0;
      sourceClusterId_ = "";
      rowKey_ = com.google.protobuf.ByteString.EMPTY;
      chunks_ = java.util.Collections.emptyList();
      token_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(UnusedPrivateParameter unused) {
      return new DataChange();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    private DataChange(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                int rawValue = input.readEnum();

                type_ = rawValue;
                break;
              }
            case 18:
              {
                String s = input.readStringRequireUtf8();

                sourceClusterId_ = s;
                break;
              }
            case 26:
              {
                rowKey_ = input.readBytes();
                break;
              }
            case 34:
              {
                com.google.protobuf.Timestamp.Builder subBuilder = null;
                if (commitTimestamp_ != null) {
                  subBuilder = commitTimestamp_.toBuilder();
                }
                commitTimestamp_ =
                    input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(commitTimestamp_);
                  commitTimestamp_ = subBuilder.buildPartial();
                }

                break;
              }
            case 40:
              {
                tiebreaker_ = input.readInt32();
                break;
              }
            case 50:
              {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  chunks_ = new java.util.ArrayList<MutationChunk>();
                  mutable_bitField0_ |= 0x00000001;
                }
                chunks_.add(input.readMessage(MutationChunk.parser(), extensionRegistry));
                break;
              }
            case 64:
              {
                done_ = input.readBool();
                break;
              }
            case 74:
              {
                String s = input.readStringRequireUtf8();

                token_ = s;
                break;
              }
            case 82:
              {
                com.google.protobuf.Timestamp.Builder subBuilder = null;
                if (lowWatermark_ != null) {
                  subBuilder = lowWatermark_.toBuilder();
                }
                lowWatermark_ =
                    input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(lowWatermark_);
                  lowWatermark_ = subBuilder.buildPartial();
                }

                break;
              }
            default:
              {
                if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          chunks_ = java.util.Collections.unmodifiableList(chunks_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_DataChange_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_DataChange_fieldAccessorTable
          .ensureFieldAccessorsInitialized(DataChange.class, Builder.class);
    }

    /**
     *
     *
     * <pre>
     * The type of mutation.
     * </pre>
     *
     * Protobuf enum {@code google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type}
     */
    public enum Type implements com.google.protobuf.ProtocolMessageEnum {
      /**
       *
       *
       * <pre>
       * The type is unspecified.
       * </pre>
       *
       * <code>TYPE_UNSPECIFIED = 0;</code>
       */
      TYPE_UNSPECIFIED(0),
      /**
       *
       *
       * <pre>
       * A user-initiated mutation.
       * </pre>
       *
       * <code>USER = 1;</code>
       */
      USER(1),
      /**
       *
       *
       * <pre>
       * A system-initiated mutation as part of garbage collection.
       * https://cloud.google.com/bigtable/docs/garbage-collection
       * </pre>
       *
       * <code>GARBAGE_COLLECTION = 2;</code>
       */
      GARBAGE_COLLECTION(2),
      /**
       *
       *
       * <pre>
       * This is a continuation of a multi-message change.
       * </pre>
       *
       * <code>CONTINUATION = 3;</code>
       */
      CONTINUATION(3),
      UNRECOGNIZED(-1),
      ;

      /**
       *
       *
       * <pre>
       * The type is unspecified.
       * </pre>
       *
       * <code>TYPE_UNSPECIFIED = 0;</code>
       */
      public static final int TYPE_UNSPECIFIED_VALUE = 0;
      /**
       *
       *
       * <pre>
       * A user-initiated mutation.
       * </pre>
       *
       * <code>USER = 1;</code>
       */
      public static final int USER_VALUE = 1;
      /**
       *
       *
       * <pre>
       * A system-initiated mutation as part of garbage collection.
       * https://cloud.google.com/bigtable/docs/garbage-collection
       * </pre>
       *
       * <code>GARBAGE_COLLECTION = 2;</code>
       */
      public static final int GARBAGE_COLLECTION_VALUE = 2;
      /**
       *
       *
       * <pre>
       * This is a continuation of a multi-message change.
       * </pre>
       *
       * <code>CONTINUATION = 3;</code>
       */
      public static final int CONTINUATION_VALUE = 3;

      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0:
            return TYPE_UNSPECIFIED;
          case 1:
            return USER;
          case 2:
            return GARBAGE_COLLECTION;
          case 3:
            return CONTINUATION;
          default:
            return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type> internalGetValueMap() {
        return internalValueMap;
      }

      private static final com.google.protobuf.Internal.EnumLiteMap<Type> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.forNumber(number);
            }
          };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }

      public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
      }

      public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return DataChange.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type)
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     *
     *
     * <pre>
     * The type of the mutation.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
     *
     * @return The enum numeric value on the wire for type.
     */
    @Override
    public int getTypeValue() {
      return type_;
    }
    /**
     *
     *
     * <pre>
     * The type of the mutation.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
     *
     * @return The type.
     */
    @Override
    public Type getType() {
      @SuppressWarnings("deprecation")
      Type result = Type.valueOf(type_);
      return result == null ? Type.UNRECOGNIZED : result;
    }

    public static final int SOURCE_CLUSTER_ID_FIELD_NUMBER = 2;
    private volatile Object sourceClusterId_;
    /**
     *
     *
     * <pre>
     * The cluster where the mutation was applied.
     * Not set when `type` is `GARBAGE_COLLECTION`.
     * </pre>
     *
     * <code>string source_cluster_id = 2;</code>
     *
     * @return The sourceClusterId.
     */
    @Override
    public String getSourceClusterId() {
      Object ref = sourceClusterId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sourceClusterId_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * The cluster where the mutation was applied.
     * Not set when `type` is `GARBAGE_COLLECTION`.
     * </pre>
     *
     * <code>string source_cluster_id = 2;</code>
     *
     * @return The bytes for sourceClusterId.
     */
    @Override
    public com.google.protobuf.ByteString getSourceClusterIdBytes() {
      Object ref = sourceClusterId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        sourceClusterId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROW_KEY_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString rowKey_;
    /**
     *
     *
     * <pre>
     * The row key for all mutations that are part of this `DataChange`.
     * If the `DataChange` is chunked across multiple messages, then this field
     * will only be set for the first message.
     * </pre>
     *
     * <code>bytes row_key = 3;</code>
     *
     * @return The rowKey.
     */
    @Override
    public com.google.protobuf.ByteString getRowKey() {
      return rowKey_;
    }

    public static final int COMMIT_TIMESTAMP_FIELD_NUMBER = 4;
    private com.google.protobuf.Timestamp commitTimestamp_;
    /**
     *
     *
     * <pre>
     * The timestamp at which the mutation was applied on the Bigtable server.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
     *
     * @return Whether the commitTimestamp field is set.
     */
    @Override
    public boolean hasCommitTimestamp() {
      return commitTimestamp_ != null;
    }
    /**
     *
     *
     * <pre>
     * The timestamp at which the mutation was applied on the Bigtable server.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
     *
     * @return The commitTimestamp.
     */
    @Override
    public com.google.protobuf.Timestamp getCommitTimestamp() {
      return commitTimestamp_ == null
          ? com.google.protobuf.Timestamp.getDefaultInstance()
          : commitTimestamp_;
    }
    /**
     *
     *
     * <pre>
     * The timestamp at which the mutation was applied on the Bigtable server.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
     */
    @Override
    public com.google.protobuf.TimestampOrBuilder getCommitTimestampOrBuilder() {
      return getCommitTimestamp();
    }

    public static final int TIEBREAKER_FIELD_NUMBER = 5;
    private int tiebreaker_;
    /**
     *
     *
     * <pre>
     * A value that lets stream consumers reconstruct Bigtable's
     * conflict resolution semantics.
     * https://cloud.google.com/bigtable/docs/writes#conflict-resolution
     * In the event that the same row key, column family, column qualifier,
     * timestamp are modified on different clusters at the same
     * `commit_timestamp`, the mutation with the larger `tiebreaker` will be the
     * one chosen for the eventually consistent state of the system.
     * </pre>
     *
     * <code>int32 tiebreaker = 5;</code>
     *
     * @return The tiebreaker.
     */
    @Override
    public int getTiebreaker() {
      return tiebreaker_;
    }

    public static final int CHUNKS_FIELD_NUMBER = 6;
    private java.util.List<MutationChunk> chunks_;
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    @Override
    public java.util.List<MutationChunk> getChunksList() {
      return chunks_;
    }
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    @Override
    public java.util.List<? extends MutationChunkOrBuilder> getChunksOrBuilderList() {
      return chunks_;
    }
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    @Override
    public int getChunksCount() {
      return chunks_.size();
    }
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    @Override
    public MutationChunk getChunks(int index) {
      return chunks_.get(index);
    }
    /**
     *
     *
     * <pre>
     * The mutations associated with this change to the partition.
     * May contain complete mutations or chunks of a multi-message chunked
     * `DataChange` record.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;</code>
     */
    @Override
    public MutationChunkOrBuilder getChunksOrBuilder(int index) {
      return chunks_.get(index);
    }

    public static final int DONE_FIELD_NUMBER = 8;
    private boolean done_;
    /**
     *
     *
     * <pre>
     * When true, indicates that the entire `DataChange` has been read
     * and the client can safely process the message.
     * </pre>
     *
     * <code>bool done = 8;</code>
     *
     * @return The done.
     */
    @Override
    public boolean getDone() {
      return done_;
    }

    public static final int TOKEN_FIELD_NUMBER = 9;
    private volatile Object token_;
    /**
     *
     *
     * <pre>
     * An encoded position for this stream's partition to restart reading from.
     * This token is for the StreamPartition from the request.
     * </pre>
     *
     * <code>string token = 9;</code>
     *
     * @return The token.
     */
    @Override
    public String getToken() {
      Object ref = token_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        token_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * An encoded position for this stream's partition to restart reading from.
     * This token is for the StreamPartition from the request.
     * </pre>
     *
     * <code>string token = 9;</code>
     *
     * @return The bytes for token.
     */
    @Override
    public com.google.protobuf.ByteString getTokenBytes() {
      Object ref = token_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        token_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOW_WATERMARK_FIELD_NUMBER = 10;
    private com.google.protobuf.Timestamp lowWatermark_;
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
     *
     * @return Whether the lowWatermark field is set.
     */
    @Override
    public boolean hasLowWatermark() {
      return lowWatermark_ != null;
    }
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
     *
     * @return The lowWatermark.
     */
    @Override
    public com.google.protobuf.Timestamp getLowWatermark() {
      return lowWatermark_ == null
          ? com.google.protobuf.Timestamp.getDefaultInstance()
          : lowWatermark_;
    }
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
     */
    @Override
    public com.google.protobuf.TimestampOrBuilder getLowWatermarkOrBuilder() {
      return getLowWatermark();
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (type_ != Type.TYPE_UNSPECIFIED.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sourceClusterId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceClusterId_);
      }
      if (!rowKey_.isEmpty()) {
        output.writeBytes(3, rowKey_);
      }
      if (commitTimestamp_ != null) {
        output.writeMessage(4, getCommitTimestamp());
      }
      if (tiebreaker_ != 0) {
        output.writeInt32(5, tiebreaker_);
      }
      for (int i = 0; i < chunks_.size(); i++) {
        output.writeMessage(6, chunks_.get(i));
      }
      if (done_ != false) {
        output.writeBool(8, done_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(token_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, token_);
      }
      if (lowWatermark_ != null) {
        output.writeMessage(10, getLowWatermark());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != Type.TYPE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sourceClusterId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceClusterId_);
      }
      if (!rowKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(3, rowKey_);
      }
      if (commitTimestamp_ != null) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, getCommitTimestamp());
      }
      if (tiebreaker_ != 0) {
        size += com.google.protobuf.CodedOutputStream.computeInt32Size(5, tiebreaker_);
      }
      for (int i = 0; i < chunks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, chunks_.get(i));
      }
      if (done_ != false) {
        size += com.google.protobuf.CodedOutputStream.computeBoolSize(8, done_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(token_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, token_);
      }
      if (lowWatermark_ != null) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(10, getLowWatermark());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof DataChange)) {
        return super.equals(obj);
      }
      DataChange other = (DataChange) obj;

      if (type_ != other.type_) return false;
      if (!getSourceClusterId().equals(other.getSourceClusterId())) return false;
      if (!getRowKey().equals(other.getRowKey())) return false;
      if (hasCommitTimestamp() != other.hasCommitTimestamp()) return false;
      if (hasCommitTimestamp()) {
        if (!getCommitTimestamp().equals(other.getCommitTimestamp())) return false;
      }
      if (getTiebreaker() != other.getTiebreaker()) return false;
      if (!getChunksList().equals(other.getChunksList())) return false;
      if (getDone() != other.getDone()) return false;
      if (!getToken().equals(other.getToken())) return false;
      if (hasLowWatermark() != other.hasLowWatermark()) return false;
      if (hasLowWatermark()) {
        if (!getLowWatermark().equals(other.getLowWatermark())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + SOURCE_CLUSTER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSourceClusterId().hashCode();
      hash = (37 * hash) + ROW_KEY_FIELD_NUMBER;
      hash = (53 * hash) + getRowKey().hashCode();
      if (hasCommitTimestamp()) {
        hash = (37 * hash) + COMMIT_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getCommitTimestamp().hashCode();
      }
      hash = (37 * hash) + TIEBREAKER_FIELD_NUMBER;
      hash = (53 * hash) + getTiebreaker();
      if (getChunksCount() > 0) {
        hash = (37 * hash) + CHUNKS_FIELD_NUMBER;
        hash = (53 * hash) + getChunksList().hashCode();
      }
      hash = (37 * hash) + DONE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getDone());
      hash = (37 * hash) + TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getToken().hashCode();
      if (hasLowWatermark()) {
        hash = (37 * hash) + LOW_WATERMARK_FIELD_NUMBER;
        hash = (53 * hash) + getLowWatermark().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static DataChange parseFrom(java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static DataChange parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static DataChange parseFrom(com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static DataChange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static DataChange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static DataChange parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static DataChange parseFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static DataChange parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static DataChange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static DataChange parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static DataChange parseFrom(com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static DataChange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(DataChange prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * A message corresponding to one or more mutations to the partition
     * being streamed. A single logical `DataChange` message may also be split
     * across a sequence of multiple individual messages. Messages other than
     * the first in a sequence will only have the `type` and `chunks` fields
     * populated, with the final message in the sequence also containing `done`
     * set to true.
     * </pre>
     *
     * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.DataChange}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.bigtable.v2.ReadChangeStreamResponse.DataChange)
        DataChangeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_DataChange_descriptor;
      }

      @Override
      protected FieldAccessorTable internalGetFieldAccessorTable() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_DataChange_fieldAccessorTable
            .ensureFieldAccessorsInitialized(DataChange.class, Builder.class);
      }

      // Construct using com.google.bigtable.v2.ReadChangeStreamResponse.DataChange.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getChunksFieldBuilder();
        }
      }

      @Override
      public Builder clear() {
        super.clear();
        type_ = 0;

        sourceClusterId_ = "";

        rowKey_ = com.google.protobuf.ByteString.EMPTY;

        if (commitTimestampBuilder_ == null) {
          commitTimestamp_ = null;
        } else {
          commitTimestamp_ = null;
          commitTimestampBuilder_ = null;
        }
        tiebreaker_ = 0;

        if (chunksBuilder_ == null) {
          chunks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          chunksBuilder_.clear();
        }
        done_ = false;

        token_ = "";

        if (lowWatermarkBuilder_ == null) {
          lowWatermark_ = null;
        } else {
          lowWatermark_ = null;
          lowWatermarkBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_DataChange_descriptor;
      }

      @Override
      public DataChange getDefaultInstanceForType() {
        return DataChange.getDefaultInstance();
      }

      @Override
      public DataChange build() {
        DataChange result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public DataChange buildPartial() {
        DataChange result = new DataChange(this);
        int from_bitField0_ = bitField0_;
        result.type_ = type_;
        result.sourceClusterId_ = sourceClusterId_;
        result.rowKey_ = rowKey_;
        if (commitTimestampBuilder_ == null) {
          result.commitTimestamp_ = commitTimestamp_;
        } else {
          result.commitTimestamp_ = commitTimestampBuilder_.build();
        }
        result.tiebreaker_ = tiebreaker_;
        if (chunksBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            chunks_ = java.util.Collections.unmodifiableList(chunks_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.chunks_ = chunks_;
        } else {
          result.chunks_ = chunksBuilder_.build();
        }
        result.done_ = done_;
        result.token_ = token_;
        if (lowWatermarkBuilder_ == null) {
          result.lowWatermark_ = lowWatermark_;
        } else {
          result.lowWatermark_ = lowWatermarkBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }

      @Override
      public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.setField(field, value);
      }

      @Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.addRepeatedField(field, value);
      }

      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof DataChange) {
          return mergeFrom((DataChange) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(DataChange other) {
        if (other == DataChange.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getSourceClusterId().isEmpty()) {
          sourceClusterId_ = other.sourceClusterId_;
          onChanged();
        }
        if (other.getRowKey() != com.google.protobuf.ByteString.EMPTY) {
          setRowKey(other.getRowKey());
        }
        if (other.hasCommitTimestamp()) {
          mergeCommitTimestamp(other.getCommitTimestamp());
        }
        if (other.getTiebreaker() != 0) {
          setTiebreaker(other.getTiebreaker());
        }
        if (chunksBuilder_ == null) {
          if (!other.chunks_.isEmpty()) {
            if (chunks_.isEmpty()) {
              chunks_ = other.chunks_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureChunksIsMutable();
              chunks_.addAll(other.chunks_);
            }
            onChanged();
          }
        } else {
          if (!other.chunks_.isEmpty()) {
            if (chunksBuilder_.isEmpty()) {
              chunksBuilder_.dispose();
              chunksBuilder_ = null;
              chunks_ = other.chunks_;
              bitField0_ = (bitField0_ & ~0x00000001);
              chunksBuilder_ =
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                      ? getChunksFieldBuilder()
                      : null;
            } else {
              chunksBuilder_.addAllMessages(other.chunks_);
            }
          }
        }
        if (other.getDone() != false) {
          setDone(other.getDone());
        }
        if (!other.getToken().isEmpty()) {
          token_ = other.token_;
          onChanged();
        }
        if (other.hasLowWatermark()) {
          mergeLowWatermark(other.getLowWatermark());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        DataChange parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (DataChange) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private int type_ = 0;
      /**
       *
       *
       * <pre>
       * The type of the mutation.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
       *
       * @return The enum numeric value on the wire for type.
       */
      @Override
      public int getTypeValue() {
        return type_;
      }
      /**
       *
       *
       * <pre>
       * The type of the mutation.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
       *
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {

        type_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The type of the mutation.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
       *
       * @return The type.
       */
      @Override
      public Type getType() {
        @SuppressWarnings("deprecation")
        Type result = Type.valueOf(type_);
        return result == null ? Type.UNRECOGNIZED : result;
      }
      /**
       *
       *
       * <pre>
       * The type of the mutation.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
       *
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(Type value) {
        if (value == null) {
          throw new NullPointerException();
        }

        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The type of the mutation.
       * </pre>
       *
       * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange.Type type = 1;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearType() {

        type_ = 0;
        onChanged();
        return this;
      }

      private Object sourceClusterId_ = "";
      /**
       *
       *
       * <pre>
       * The cluster where the mutation was applied.
       * Not set when `type` is `GARBAGE_COLLECTION`.
       * </pre>
       *
       * <code>string source_cluster_id = 2;</code>
       *
       * @return The sourceClusterId.
       */
      public String getSourceClusterId() {
        Object ref = sourceClusterId_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          sourceClusterId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * The cluster where the mutation was applied.
       * Not set when `type` is `GARBAGE_COLLECTION`.
       * </pre>
       *
       * <code>string source_cluster_id = 2;</code>
       *
       * @return The bytes for sourceClusterId.
       */
      public com.google.protobuf.ByteString getSourceClusterIdBytes() {
        Object ref = sourceClusterId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((String) ref);
          sourceClusterId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * The cluster where the mutation was applied.
       * Not set when `type` is `GARBAGE_COLLECTION`.
       * </pre>
       *
       * <code>string source_cluster_id = 2;</code>
       *
       * @param value The sourceClusterId to set.
       * @return This builder for chaining.
       */
      public Builder setSourceClusterId(String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        sourceClusterId_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The cluster where the mutation was applied.
       * Not set when `type` is `GARBAGE_COLLECTION`.
       * </pre>
       *
       * <code>string source_cluster_id = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearSourceClusterId() {

        sourceClusterId_ = getDefaultInstance().getSourceClusterId();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The cluster where the mutation was applied.
       * Not set when `type` is `GARBAGE_COLLECTION`.
       * </pre>
       *
       * <code>string source_cluster_id = 2;</code>
       *
       * @param value The bytes for sourceClusterId to set.
       * @return This builder for chaining.
       */
      public Builder setSourceClusterIdBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        sourceClusterId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString rowKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       *
       *
       * <pre>
       * The row key for all mutations that are part of this `DataChange`.
       * If the `DataChange` is chunked across multiple messages, then this field
       * will only be set for the first message.
       * </pre>
       *
       * <code>bytes row_key = 3;</code>
       *
       * @return The rowKey.
       */
      @Override
      public com.google.protobuf.ByteString getRowKey() {
        return rowKey_;
      }
      /**
       *
       *
       * <pre>
       * The row key for all mutations that are part of this `DataChange`.
       * If the `DataChange` is chunked across multiple messages, then this field
       * will only be set for the first message.
       * </pre>
       *
       * <code>bytes row_key = 3;</code>
       *
       * @param value The rowKey to set.
       * @return This builder for chaining.
       */
      public Builder setRowKey(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }

        rowKey_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The row key for all mutations that are part of this `DataChange`.
       * If the `DataChange` is chunked across multiple messages, then this field
       * will only be set for the first message.
       * </pre>
       *
       * <code>bytes row_key = 3;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearRowKey() {

        rowKey_ = getDefaultInstance().getRowKey();
        onChanged();
        return this;
      }

      private com.google.protobuf.Timestamp commitTimestamp_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp,
              com.google.protobuf.Timestamp.Builder,
              com.google.protobuf.TimestampOrBuilder>
          commitTimestampBuilder_;
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       *
       * @return Whether the commitTimestamp field is set.
       */
      public boolean hasCommitTimestamp() {
        return commitTimestampBuilder_ != null || commitTimestamp_ != null;
      }
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       *
       * @return The commitTimestamp.
       */
      public com.google.protobuf.Timestamp getCommitTimestamp() {
        if (commitTimestampBuilder_ == null) {
          return commitTimestamp_ == null
              ? com.google.protobuf.Timestamp.getDefaultInstance()
              : commitTimestamp_;
        } else {
          return commitTimestampBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       */
      public Builder setCommitTimestamp(com.google.protobuf.Timestamp value) {
        if (commitTimestampBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commitTimestamp_ = value;
          onChanged();
        } else {
          commitTimestampBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       */
      public Builder setCommitTimestamp(com.google.protobuf.Timestamp.Builder builderForValue) {
        if (commitTimestampBuilder_ == null) {
          commitTimestamp_ = builderForValue.build();
          onChanged();
        } else {
          commitTimestampBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       */
      public Builder mergeCommitTimestamp(com.google.protobuf.Timestamp value) {
        if (commitTimestampBuilder_ == null) {
          if (commitTimestamp_ != null) {
            commitTimestamp_ =
                com.google.protobuf.Timestamp.newBuilder(commitTimestamp_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            commitTimestamp_ = value;
          }
          onChanged();
        } else {
          commitTimestampBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       */
      public Builder clearCommitTimestamp() {
        if (commitTimestampBuilder_ == null) {
          commitTimestamp_ = null;
          onChanged();
        } else {
          commitTimestamp_ = null;
          commitTimestampBuilder_ = null;
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       */
      public com.google.protobuf.Timestamp.Builder getCommitTimestampBuilder() {

        onChanged();
        return getCommitTimestampFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getCommitTimestampOrBuilder() {
        if (commitTimestampBuilder_ != null) {
          return commitTimestampBuilder_.getMessageOrBuilder();
        } else {
          return commitTimestamp_ == null
              ? com.google.protobuf.Timestamp.getDefaultInstance()
              : commitTimestamp_;
        }
      }
      /**
       *
       *
       * <pre>
       * The timestamp at which the mutation was applied on the Bigtable server.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp commit_timestamp = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp,
              com.google.protobuf.Timestamp.Builder,
              com.google.protobuf.TimestampOrBuilder>
          getCommitTimestampFieldBuilder() {
        if (commitTimestampBuilder_ == null) {
          commitTimestampBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.protobuf.Timestamp,
                  com.google.protobuf.Timestamp.Builder,
                  com.google.protobuf.TimestampOrBuilder>(
                  getCommitTimestamp(), getParentForChildren(), isClean());
          commitTimestamp_ = null;
        }
        return commitTimestampBuilder_;
      }

      private int tiebreaker_;
      /**
       *
       *
       * <pre>
       * A value that lets stream consumers reconstruct Bigtable's
       * conflict resolution semantics.
       * https://cloud.google.com/bigtable/docs/writes#conflict-resolution
       * In the event that the same row key, column family, column qualifier,
       * timestamp are modified on different clusters at the same
       * `commit_timestamp`, the mutation with the larger `tiebreaker` will be the
       * one chosen for the eventually consistent state of the system.
       * </pre>
       *
       * <code>int32 tiebreaker = 5;</code>
       *
       * @return The tiebreaker.
       */
      @Override
      public int getTiebreaker() {
        return tiebreaker_;
      }
      /**
       *
       *
       * <pre>
       * A value that lets stream consumers reconstruct Bigtable's
       * conflict resolution semantics.
       * https://cloud.google.com/bigtable/docs/writes#conflict-resolution
       * In the event that the same row key, column family, column qualifier,
       * timestamp are modified on different clusters at the same
       * `commit_timestamp`, the mutation with the larger `tiebreaker` will be the
       * one chosen for the eventually consistent state of the system.
       * </pre>
       *
       * <code>int32 tiebreaker = 5;</code>
       *
       * @param value The tiebreaker to set.
       * @return This builder for chaining.
       */
      public Builder setTiebreaker(int value) {

        tiebreaker_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * A value that lets stream consumers reconstruct Bigtable's
       * conflict resolution semantics.
       * https://cloud.google.com/bigtable/docs/writes#conflict-resolution
       * In the event that the same row key, column family, column qualifier,
       * timestamp are modified on different clusters at the same
       * `commit_timestamp`, the mutation with the larger `tiebreaker` will be the
       * one chosen for the eventually consistent state of the system.
       * </pre>
       *
       * <code>int32 tiebreaker = 5;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearTiebreaker() {

        tiebreaker_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<MutationChunk> chunks_ = java.util.Collections.emptyList();

      private void ensureChunksIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          chunks_ = new java.util.ArrayList<MutationChunk>(chunks_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              MutationChunk, MutationChunk.Builder, MutationChunkOrBuilder>
          chunksBuilder_;

      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public java.util.List<MutationChunk> getChunksList() {
        if (chunksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(chunks_);
        } else {
          return chunksBuilder_.getMessageList();
        }
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public int getChunksCount() {
        if (chunksBuilder_ == null) {
          return chunks_.size();
        } else {
          return chunksBuilder_.getCount();
        }
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public MutationChunk getChunks(int index) {
        if (chunksBuilder_ == null) {
          return chunks_.get(index);
        } else {
          return chunksBuilder_.getMessage(index);
        }
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder setChunks(int index, MutationChunk value) {
        if (chunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksIsMutable();
          chunks_.set(index, value);
          onChanged();
        } else {
          chunksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder setChunks(int index, MutationChunk.Builder builderForValue) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          chunks_.set(index, builderForValue.build());
          onChanged();
        } else {
          chunksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder addChunks(MutationChunk value) {
        if (chunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksIsMutable();
          chunks_.add(value);
          onChanged();
        } else {
          chunksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder addChunks(int index, MutationChunk value) {
        if (chunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksIsMutable();
          chunks_.add(index, value);
          onChanged();
        } else {
          chunksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder addChunks(MutationChunk.Builder builderForValue) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          chunks_.add(builderForValue.build());
          onChanged();
        } else {
          chunksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder addChunks(int index, MutationChunk.Builder builderForValue) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          chunks_.add(index, builderForValue.build());
          onChanged();
        } else {
          chunksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder addAllChunks(Iterable<? extends MutationChunk> values) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(values, chunks_);
          onChanged();
        } else {
          chunksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder clearChunks() {
        if (chunksBuilder_ == null) {
          chunks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          chunksBuilder_.clear();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public Builder removeChunks(int index) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          chunks_.remove(index);
          onChanged();
        } else {
          chunksBuilder_.remove(index);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public MutationChunk.Builder getChunksBuilder(int index) {
        return getChunksFieldBuilder().getBuilder(index);
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public MutationChunkOrBuilder getChunksOrBuilder(int index) {
        if (chunksBuilder_ == null) {
          return chunks_.get(index);
        } else {
          return chunksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public java.util.List<? extends MutationChunkOrBuilder> getChunksOrBuilderList() {
        if (chunksBuilder_ != null) {
          return chunksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(chunks_);
        }
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public MutationChunk.Builder addChunksBuilder() {
        return getChunksFieldBuilder().addBuilder(MutationChunk.getDefaultInstance());
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public MutationChunk.Builder addChunksBuilder(int index) {
        return getChunksFieldBuilder().addBuilder(index, MutationChunk.getDefaultInstance());
      }
      /**
       *
       *
       * <pre>
       * The mutations associated with this change to the partition.
       * May contain complete mutations or chunks of a multi-message chunked
       * `DataChange` record.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.ReadChangeStreamResponse.MutationChunk chunks = 6;
       * </code>
       */
      public java.util.List<MutationChunk.Builder> getChunksBuilderList() {
        return getChunksFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              MutationChunk, MutationChunk.Builder, MutationChunkOrBuilder>
          getChunksFieldBuilder() {
        if (chunksBuilder_ == null) {
          chunksBuilder_ =
              new com.google.protobuf.RepeatedFieldBuilderV3<
                  MutationChunk, MutationChunk.Builder, MutationChunkOrBuilder>(
                  chunks_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
          chunks_ = null;
        }
        return chunksBuilder_;
      }

      private boolean done_;
      /**
       *
       *
       * <pre>
       * When true, indicates that the entire `DataChange` has been read
       * and the client can safely process the message.
       * </pre>
       *
       * <code>bool done = 8;</code>
       *
       * @return The done.
       */
      @Override
      public boolean getDone() {
        return done_;
      }
      /**
       *
       *
       * <pre>
       * When true, indicates that the entire `DataChange` has been read
       * and the client can safely process the message.
       * </pre>
       *
       * <code>bool done = 8;</code>
       *
       * @param value The done to set.
       * @return This builder for chaining.
       */
      public Builder setDone(boolean value) {

        done_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * When true, indicates that the entire `DataChange` has been read
       * and the client can safely process the message.
       * </pre>
       *
       * <code>bool done = 8;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearDone() {

        done_ = false;
        onChanged();
        return this;
      }

      private Object token_ = "";
      /**
       *
       *
       * <pre>
       * An encoded position for this stream's partition to restart reading from.
       * This token is for the StreamPartition from the request.
       * </pre>
       *
       * <code>string token = 9;</code>
       *
       * @return The token.
       */
      public String getToken() {
        Object ref = token_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          token_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * An encoded position for this stream's partition to restart reading from.
       * This token is for the StreamPartition from the request.
       * </pre>
       *
       * <code>string token = 9;</code>
       *
       * @return The bytes for token.
       */
      public com.google.protobuf.ByteString getTokenBytes() {
        Object ref = token_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((String) ref);
          token_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * An encoded position for this stream's partition to restart reading from.
       * This token is for the StreamPartition from the request.
       * </pre>
       *
       * <code>string token = 9;</code>
       *
       * @param value The token to set.
       * @return This builder for chaining.
       */
      public Builder setToken(String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        token_ = value;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * An encoded position for this stream's partition to restart reading from.
       * This token is for the StreamPartition from the request.
       * </pre>
       *
       * <code>string token = 9;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearToken() {

        token_ = getDefaultInstance().getToken();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * An encoded position for this stream's partition to restart reading from.
       * This token is for the StreamPartition from the request.
       * </pre>
       *
       * <code>string token = 9;</code>
       *
       * @param value The bytes for token to set.
       * @return This builder for chaining.
       */
      public Builder setTokenBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        token_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.Timestamp lowWatermark_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp,
              com.google.protobuf.Timestamp.Builder,
              com.google.protobuf.TimestampOrBuilder>
          lowWatermarkBuilder_;
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       *
       * @return Whether the lowWatermark field is set.
       */
      public boolean hasLowWatermark() {
        return lowWatermarkBuilder_ != null || lowWatermark_ != null;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       *
       * @return The lowWatermark.
       */
      public com.google.protobuf.Timestamp getLowWatermark() {
        if (lowWatermarkBuilder_ == null) {
          return lowWatermark_ == null
              ? com.google.protobuf.Timestamp.getDefaultInstance()
              : lowWatermark_;
        } else {
          return lowWatermarkBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       */
      public Builder setLowWatermark(com.google.protobuf.Timestamp value) {
        if (lowWatermarkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lowWatermark_ = value;
          onChanged();
        } else {
          lowWatermarkBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       */
      public Builder setLowWatermark(com.google.protobuf.Timestamp.Builder builderForValue) {
        if (lowWatermarkBuilder_ == null) {
          lowWatermark_ = builderForValue.build();
          onChanged();
        } else {
          lowWatermarkBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       */
      public Builder mergeLowWatermark(com.google.protobuf.Timestamp value) {
        if (lowWatermarkBuilder_ == null) {
          if (lowWatermark_ != null) {
            lowWatermark_ =
                com.google.protobuf.Timestamp.newBuilder(lowWatermark_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            lowWatermark_ = value;
          }
          onChanged();
        } else {
          lowWatermarkBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       */
      public Builder clearLowWatermark() {
        if (lowWatermarkBuilder_ == null) {
          lowWatermark_ = null;
          onChanged();
        } else {
          lowWatermark_ = null;
          lowWatermarkBuilder_ = null;
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       */
      public com.google.protobuf.Timestamp.Builder getLowWatermarkBuilder() {

        onChanged();
        return getLowWatermarkFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getLowWatermarkOrBuilder() {
        if (lowWatermarkBuilder_ != null) {
          return lowWatermarkBuilder_.getMessageOrBuilder();
        } else {
          return lowWatermark_ == null
              ? com.google.protobuf.Timestamp.getDefaultInstance()
              : lowWatermark_;
        }
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp,
              com.google.protobuf.Timestamp.Builder,
              com.google.protobuf.TimestampOrBuilder>
          getLowWatermarkFieldBuilder() {
        if (lowWatermarkBuilder_ == null) {
          lowWatermarkBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.protobuf.Timestamp,
                  com.google.protobuf.Timestamp.Builder,
                  com.google.protobuf.TimestampOrBuilder>(
                  getLowWatermark(), getParentForChildren(), isClean());
          lowWatermark_ = null;
        }
        return lowWatermarkBuilder_;
      }

      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.bigtable.v2.ReadChangeStreamResponse.DataChange)
    }

    // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.DataChange)
    private static final DataChange DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new DataChange();
    }

    public static DataChange getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataChange> PARSER =
        new com.google.protobuf.AbstractParser<DataChange>() {
          @Override
          public DataChange parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new DataChange(input, extensionRegistry);
          }
        };

    public static com.google.protobuf.Parser<DataChange> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<DataChange> getParserForType() {
      return PARSER;
    }

    @Override
    public DataChange getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface HeartbeatOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * A token that can be provided to a subsequent `ReadChangeStream` call
     * to pick up reading at the current stream position.
     * </pre>
     *
     * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
     *
     * @return Whether the continuationToken field is set.
     */
    boolean hasContinuationToken();
    /**
     *
     *
     * <pre>
     * A token that can be provided to a subsequent `ReadChangeStream` call
     * to pick up reading at the current stream position.
     * </pre>
     *
     * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
     *
     * @return The continuationToken.
     */
    StreamContinuationToken getContinuationToken();
    /**
     *
     *
     * <pre>
     * A token that can be provided to a subsequent `ReadChangeStream` call
     * to pick up reading at the current stream position.
     * </pre>
     *
     * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
     */
    StreamContinuationTokenOrBuilder getContinuationTokenOrBuilder();

    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
     *
     * @return Whether the lowWatermark field is set.
     */
    boolean hasLowWatermark();
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
     *
     * @return The lowWatermark.
     */
    com.google.protobuf.Timestamp getLowWatermark();
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
     */
    com.google.protobuf.TimestampOrBuilder getLowWatermarkOrBuilder();
  }
  /**
   *
   *
   * <pre>
   * A periodic message with information that can be used to checkpoint
   * the state of a stream.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.Heartbeat}
   */
  public static final class Heartbeat extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat)
      HeartbeatOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use Heartbeat.newBuilder() to construct.
    private Heartbeat(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Heartbeat() {}

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(UnusedPrivateParameter unused) {
      return new Heartbeat();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    private Heartbeat(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                StreamContinuationToken.Builder subBuilder = null;
                if (continuationToken_ != null) {
                  subBuilder = continuationToken_.toBuilder();
                }
                continuationToken_ =
                    input.readMessage(StreamContinuationToken.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(continuationToken_);
                  continuationToken_ = subBuilder.buildPartial();
                }

                break;
              }
            case 18:
              {
                com.google.protobuf.Timestamp.Builder subBuilder = null;
                if (lowWatermark_ != null) {
                  subBuilder = lowWatermark_.toBuilder();
                }
                lowWatermark_ =
                    input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(lowWatermark_);
                  lowWatermark_ = subBuilder.buildPartial();
                }

                break;
              }
            default:
              {
                if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_Heartbeat_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_Heartbeat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(Heartbeat.class, Builder.class);
    }

    public static final int CONTINUATION_TOKEN_FIELD_NUMBER = 1;
    private StreamContinuationToken continuationToken_;
    /**
     *
     *
     * <pre>
     * A token that can be provided to a subsequent `ReadChangeStream` call
     * to pick up reading at the current stream position.
     * </pre>
     *
     * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
     *
     * @return Whether the continuationToken field is set.
     */
    @Override
    public boolean hasContinuationToken() {
      return continuationToken_ != null;
    }
    /**
     *
     *
     * <pre>
     * A token that can be provided to a subsequent `ReadChangeStream` call
     * to pick up reading at the current stream position.
     * </pre>
     *
     * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
     *
     * @return The continuationToken.
     */
    @Override
    public StreamContinuationToken getContinuationToken() {
      return continuationToken_ == null
          ? StreamContinuationToken.getDefaultInstance()
          : continuationToken_;
    }
    /**
     *
     *
     * <pre>
     * A token that can be provided to a subsequent `ReadChangeStream` call
     * to pick up reading at the current stream position.
     * </pre>
     *
     * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
     */
    @Override
    public StreamContinuationTokenOrBuilder getContinuationTokenOrBuilder() {
      return getContinuationToken();
    }

    public static final int LOW_WATERMARK_FIELD_NUMBER = 2;
    private com.google.protobuf.Timestamp lowWatermark_;
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
     *
     * @return Whether the lowWatermark field is set.
     */
    @Override
    public boolean hasLowWatermark() {
      return lowWatermark_ != null;
    }
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
     *
     * @return The lowWatermark.
     */
    @Override
    public com.google.protobuf.Timestamp getLowWatermark() {
      return lowWatermark_ == null
          ? com.google.protobuf.Timestamp.getDefaultInstance()
          : lowWatermark_;
    }
    /**
     *
     *
     * <pre>
     * A commit timestamp that is lower than or equal to any timestamp for a
     * record that will be delivered in the future on the stream. For an example
     * usage see https://beam.apache.org/documentation/basics/#watermarks
     * </pre>
     *
     * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
     */
    @Override
    public com.google.protobuf.TimestampOrBuilder getLowWatermarkOrBuilder() {
      return getLowWatermark();
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (continuationToken_ != null) {
        output.writeMessage(1, getContinuationToken());
      }
      if (lowWatermark_ != null) {
        output.writeMessage(2, getLowWatermark());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (continuationToken_ != null) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getContinuationToken());
      }
      if (lowWatermark_ != null) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getLowWatermark());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof Heartbeat)) {
        return super.equals(obj);
      }
      Heartbeat other = (Heartbeat) obj;

      if (hasContinuationToken() != other.hasContinuationToken()) return false;
      if (hasContinuationToken()) {
        if (!getContinuationToken().equals(other.getContinuationToken())) return false;
      }
      if (hasLowWatermark() != other.hasLowWatermark()) return false;
      if (hasLowWatermark()) {
        if (!getLowWatermark().equals(other.getLowWatermark())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasContinuationToken()) {
        hash = (37 * hash) + CONTINUATION_TOKEN_FIELD_NUMBER;
        hash = (53 * hash) + getContinuationToken().hashCode();
      }
      if (hasLowWatermark()) {
        hash = (37 * hash) + LOW_WATERMARK_FIELD_NUMBER;
        hash = (53 * hash) + getLowWatermark().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Heartbeat parseFrom(java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static Heartbeat parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Heartbeat parseFrom(com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static Heartbeat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Heartbeat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static Heartbeat parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Heartbeat parseFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static Heartbeat parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static Heartbeat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static Heartbeat parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static Heartbeat parseFrom(com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static Heartbeat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(Heartbeat prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * A periodic message with information that can be used to checkpoint
     * the state of a stream.
     * </pre>
     *
     * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.Heartbeat}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat)
        HeartbeatOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_Heartbeat_descriptor;
      }

      @Override
      protected FieldAccessorTable internalGetFieldAccessorTable() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_Heartbeat_fieldAccessorTable
            .ensureFieldAccessorsInitialized(Heartbeat.class, Builder.class);
      }

      // Construct using com.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
      }

      @Override
      public Builder clear() {
        super.clear();
        if (continuationTokenBuilder_ == null) {
          continuationToken_ = null;
        } else {
          continuationToken_ = null;
          continuationTokenBuilder_ = null;
        }
        if (lowWatermarkBuilder_ == null) {
          lowWatermark_ = null;
        } else {
          lowWatermark_ = null;
          lowWatermarkBuilder_ = null;
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_Heartbeat_descriptor;
      }

      @Override
      public Heartbeat getDefaultInstanceForType() {
        return Heartbeat.getDefaultInstance();
      }

      @Override
      public Heartbeat build() {
        Heartbeat result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Heartbeat buildPartial() {
        Heartbeat result = new Heartbeat(this);
        if (continuationTokenBuilder_ == null) {
          result.continuationToken_ = continuationToken_;
        } else {
          result.continuationToken_ = continuationTokenBuilder_.build();
        }
        if (lowWatermarkBuilder_ == null) {
          result.lowWatermark_ = lowWatermark_;
        } else {
          result.lowWatermark_ = lowWatermarkBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }

      @Override
      public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.setField(field, value);
      }

      @Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.addRepeatedField(field, value);
      }

      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Heartbeat) {
          return mergeFrom((Heartbeat) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Heartbeat other) {
        if (other == Heartbeat.getDefaultInstance()) return this;
        if (other.hasContinuationToken()) {
          mergeContinuationToken(other.getContinuationToken());
        }
        if (other.hasLowWatermark()) {
          mergeLowWatermark(other.getLowWatermark());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Heartbeat parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Heartbeat) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private StreamContinuationToken continuationToken_;
      private com.google.protobuf.SingleFieldBuilderV3<
              StreamContinuationToken,
              StreamContinuationToken.Builder,
              StreamContinuationTokenOrBuilder>
          continuationTokenBuilder_;
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       *
       * @return Whether the continuationToken field is set.
       */
      public boolean hasContinuationToken() {
        return continuationTokenBuilder_ != null || continuationToken_ != null;
      }
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       *
       * @return The continuationToken.
       */
      public StreamContinuationToken getContinuationToken() {
        if (continuationTokenBuilder_ == null) {
          return continuationToken_ == null
              ? StreamContinuationToken.getDefaultInstance()
              : continuationToken_;
        } else {
          return continuationTokenBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       */
      public Builder setContinuationToken(StreamContinuationToken value) {
        if (continuationTokenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          continuationToken_ = value;
          onChanged();
        } else {
          continuationTokenBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       */
      public Builder setContinuationToken(StreamContinuationToken.Builder builderForValue) {
        if (continuationTokenBuilder_ == null) {
          continuationToken_ = builderForValue.build();
          onChanged();
        } else {
          continuationTokenBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       */
      public Builder mergeContinuationToken(StreamContinuationToken value) {
        if (continuationTokenBuilder_ == null) {
          if (continuationToken_ != null) {
            continuationToken_ =
                StreamContinuationToken.newBuilder(continuationToken_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            continuationToken_ = value;
          }
          onChanged();
        } else {
          continuationTokenBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       */
      public Builder clearContinuationToken() {
        if (continuationTokenBuilder_ == null) {
          continuationToken_ = null;
          onChanged();
        } else {
          continuationToken_ = null;
          continuationTokenBuilder_ = null;
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       */
      public StreamContinuationToken.Builder getContinuationTokenBuilder() {

        onChanged();
        return getContinuationTokenFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       */
      public StreamContinuationTokenOrBuilder getContinuationTokenOrBuilder() {
        if (continuationTokenBuilder_ != null) {
          return continuationTokenBuilder_.getMessageOrBuilder();
        } else {
          return continuationToken_ == null
              ? StreamContinuationToken.getDefaultInstance()
              : continuationToken_;
        }
      }
      /**
       *
       *
       * <pre>
       * A token that can be provided to a subsequent `ReadChangeStream` call
       * to pick up reading at the current stream position.
       * </pre>
       *
       * <code>.google.bigtable.v2.StreamContinuationToken continuation_token = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              StreamContinuationToken,
              StreamContinuationToken.Builder,
              StreamContinuationTokenOrBuilder>
          getContinuationTokenFieldBuilder() {
        if (continuationTokenBuilder_ == null) {
          continuationTokenBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  StreamContinuationToken,
                  StreamContinuationToken.Builder,
                  StreamContinuationTokenOrBuilder>(
                  getContinuationToken(), getParentForChildren(), isClean());
          continuationToken_ = null;
        }
        return continuationTokenBuilder_;
      }

      private com.google.protobuf.Timestamp lowWatermark_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp,
              com.google.protobuf.Timestamp.Builder,
              com.google.protobuf.TimestampOrBuilder>
          lowWatermarkBuilder_;
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       *
       * @return Whether the lowWatermark field is set.
       */
      public boolean hasLowWatermark() {
        return lowWatermarkBuilder_ != null || lowWatermark_ != null;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       *
       * @return The lowWatermark.
       */
      public com.google.protobuf.Timestamp getLowWatermark() {
        if (lowWatermarkBuilder_ == null) {
          return lowWatermark_ == null
              ? com.google.protobuf.Timestamp.getDefaultInstance()
              : lowWatermark_;
        } else {
          return lowWatermarkBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       */
      public Builder setLowWatermark(com.google.protobuf.Timestamp value) {
        if (lowWatermarkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lowWatermark_ = value;
          onChanged();
        } else {
          lowWatermarkBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       */
      public Builder setLowWatermark(com.google.protobuf.Timestamp.Builder builderForValue) {
        if (lowWatermarkBuilder_ == null) {
          lowWatermark_ = builderForValue.build();
          onChanged();
        } else {
          lowWatermarkBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       */
      public Builder mergeLowWatermark(com.google.protobuf.Timestamp value) {
        if (lowWatermarkBuilder_ == null) {
          if (lowWatermark_ != null) {
            lowWatermark_ =
                com.google.protobuf.Timestamp.newBuilder(lowWatermark_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            lowWatermark_ = value;
          }
          onChanged();
        } else {
          lowWatermarkBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       */
      public Builder clearLowWatermark() {
        if (lowWatermarkBuilder_ == null) {
          lowWatermark_ = null;
          onChanged();
        } else {
          lowWatermark_ = null;
          lowWatermarkBuilder_ = null;
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       */
      public com.google.protobuf.Timestamp.Builder getLowWatermarkBuilder() {

        onChanged();
        return getLowWatermarkFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getLowWatermarkOrBuilder() {
        if (lowWatermarkBuilder_ != null) {
          return lowWatermarkBuilder_.getMessageOrBuilder();
        } else {
          return lowWatermark_ == null
              ? com.google.protobuf.Timestamp.getDefaultInstance()
              : lowWatermark_;
        }
      }
      /**
       *
       *
       * <pre>
       * A commit timestamp that is lower than or equal to any timestamp for a
       * record that will be delivered in the future on the stream. For an example
       * usage see https://beam.apache.org/documentation/basics/#watermarks
       * </pre>
       *
       * <code>.google.protobuf.Timestamp low_watermark = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp,
              com.google.protobuf.Timestamp.Builder,
              com.google.protobuf.TimestampOrBuilder>
          getLowWatermarkFieldBuilder() {
        if (lowWatermarkBuilder_ == null) {
          lowWatermarkBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.protobuf.Timestamp,
                  com.google.protobuf.Timestamp.Builder,
                  com.google.protobuf.TimestampOrBuilder>(
                  getLowWatermark(), getParentForChildren(), isClean());
          lowWatermark_ = null;
        }
        return lowWatermarkBuilder_;
      }

      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat)
    }

    // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.Heartbeat)
    private static final Heartbeat DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new Heartbeat();
    }

    public static Heartbeat getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Heartbeat> PARSER =
        new com.google.protobuf.AbstractParser<Heartbeat>() {
          @Override
          public Heartbeat parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Heartbeat(input, extensionRegistry);
          }
        };

    public static com.google.protobuf.Parser<Heartbeat> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Heartbeat> getParserForType() {
      return PARSER;
    }

    @Override
    public Heartbeat getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface CloseStreamOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.bigtable.v2.ReadChangeStreamResponse.CloseStream)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * The status of the stream.
     * </pre>
     *
     * <code>.google.rpc.Status status = 1;</code>
     *
     * @return Whether the status field is set.
     */
    boolean hasStatus();
    /**
     *
     *
     * <pre>
     * The status of the stream.
     * </pre>
     *
     * <code>.google.rpc.Status status = 1;</code>
     *
     * @return The status.
     */
    com.google.rpc.Status getStatus();
    /**
     *
     *
     * <pre>
     * The status of the stream.
     * </pre>
     *
     * <code>.google.rpc.Status status = 1;</code>
     */
    com.google.rpc.StatusOrBuilder getStatusOrBuilder();

    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    java.util.List<StreamContinuationToken> getContinuationTokensList();
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    StreamContinuationToken getContinuationTokens(int index);
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    int getContinuationTokensCount();
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    java.util.List<? extends StreamContinuationTokenOrBuilder> getContinuationTokensOrBuilderList();
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    StreamContinuationTokenOrBuilder getContinuationTokensOrBuilder(int index);
  }
  /**
   *
   *
   * <pre>
   * A message indicating that the client should stop reading from the stream.
   * If status is OK and `continuation_tokens` is empty, the stream has finished
   * (for example if there was an `end_time` specified).
   * If `continuation_tokens` is present, then a change in partitioning requires
   * the client to open a new stream for each token to resume reading.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.CloseStream}
   */
  public static final class CloseStream extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.bigtable.v2.ReadChangeStreamResponse.CloseStream)
      CloseStreamOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use CloseStream.newBuilder() to construct.
    private CloseStream(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private CloseStream() {
      continuationTokens_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(UnusedPrivateParameter unused) {
      return new CloseStream();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    private CloseStream(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                com.google.rpc.Status.Builder subBuilder = null;
                if (status_ != null) {
                  subBuilder = status_.toBuilder();
                }
                status_ = input.readMessage(com.google.rpc.Status.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(status_);
                  status_ = subBuilder.buildPartial();
                }

                break;
              }
            case 18:
              {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  continuationTokens_ = new java.util.ArrayList<StreamContinuationToken>();
                  mutable_bitField0_ |= 0x00000001;
                }
                continuationTokens_.add(
                    input.readMessage(StreamContinuationToken.parser(), extensionRegistry));
                break;
              }
            default:
              {
                if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          continuationTokens_ = java.util.Collections.unmodifiableList(continuationTokens_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_CloseStream_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_CloseStream_fieldAccessorTable
          .ensureFieldAccessorsInitialized(CloseStream.class, Builder.class);
    }

    public static final int STATUS_FIELD_NUMBER = 1;
    private com.google.rpc.Status status_;
    /**
     *
     *
     * <pre>
     * The status of the stream.
     * </pre>
     *
     * <code>.google.rpc.Status status = 1;</code>
     *
     * @return Whether the status field is set.
     */
    @Override
    public boolean hasStatus() {
      return status_ != null;
    }
    /**
     *
     *
     * <pre>
     * The status of the stream.
     * </pre>
     *
     * <code>.google.rpc.Status status = 1;</code>
     *
     * @return The status.
     */
    @Override
    public com.google.rpc.Status getStatus() {
      return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
    }
    /**
     *
     *
     * <pre>
     * The status of the stream.
     * </pre>
     *
     * <code>.google.rpc.Status status = 1;</code>
     */
    @Override
    public com.google.rpc.StatusOrBuilder getStatusOrBuilder() {
      return getStatus();
    }

    public static final int CONTINUATION_TOKENS_FIELD_NUMBER = 2;
    private java.util.List<StreamContinuationToken> continuationTokens_;
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    @Override
    public java.util.List<StreamContinuationToken> getContinuationTokensList() {
      return continuationTokens_;
    }
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    @Override
    public java.util.List<? extends StreamContinuationTokenOrBuilder>
        getContinuationTokensOrBuilderList() {
      return continuationTokens_;
    }
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    @Override
    public int getContinuationTokensCount() {
      return continuationTokens_.size();
    }
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    @Override
    public StreamContinuationToken getContinuationTokens(int index) {
      return continuationTokens_.get(index);
    }
    /**
     *
     *
     * <pre>
     * If non-empty, contains the information needed to start reading the new
     * partition(s) that contain segments of this partition's row range.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
     */
    @Override
    public StreamContinuationTokenOrBuilder getContinuationTokensOrBuilder(int index) {
      return continuationTokens_.get(index);
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (status_ != null) {
        output.writeMessage(1, getStatus());
      }
      for (int i = 0; i < continuationTokens_.size(); i++) {
        output.writeMessage(2, continuationTokens_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (status_ != null) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getStatus());
      }
      for (int i = 0; i < continuationTokens_.size(); i++) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(2, continuationTokens_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof CloseStream)) {
        return super.equals(obj);
      }
      CloseStream other = (CloseStream) obj;

      if (hasStatus() != other.hasStatus()) return false;
      if (hasStatus()) {
        if (!getStatus().equals(other.getStatus())) return false;
      }
      if (!getContinuationTokensList().equals(other.getContinuationTokensList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStatus()) {
        hash = (37 * hash) + STATUS_FIELD_NUMBER;
        hash = (53 * hash) + getStatus().hashCode();
      }
      if (getContinuationTokensCount() > 0) {
        hash = (37 * hash) + CONTINUATION_TOKENS_FIELD_NUMBER;
        hash = (53 * hash) + getContinuationTokensList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static CloseStream parseFrom(java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static CloseStream parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static CloseStream parseFrom(com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static CloseStream parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static CloseStream parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static CloseStream parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static CloseStream parseFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static CloseStream parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static CloseStream parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static CloseStream parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static CloseStream parseFrom(com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static CloseStream parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(CloseStream prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * A message indicating that the client should stop reading from the stream.
     * If status is OK and `continuation_tokens` is empty, the stream has finished
     * (for example if there was an `end_time` specified).
     * If `continuation_tokens` is present, then a change in partitioning requires
     * the client to open a new stream for each token to resume reading.
     * </pre>
     *
     * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse.CloseStream}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.bigtable.v2.ReadChangeStreamResponse.CloseStream)
        CloseStreamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_CloseStream_descriptor;
      }

      @Override
      protected FieldAccessorTable internalGetFieldAccessorTable() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_CloseStream_fieldAccessorTable
            .ensureFieldAccessorsInitialized(CloseStream.class, Builder.class);
      }

      // Construct using com.google.bigtable.v2.ReadChangeStreamResponse.CloseStream.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getContinuationTokensFieldBuilder();
        }
      }

      @Override
      public Builder clear() {
        super.clear();
        if (statusBuilder_ == null) {
          status_ = null;
        } else {
          status_ = null;
          statusBuilder_ = null;
        }
        if (continuationTokensBuilder_ == null) {
          continuationTokens_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          continuationTokensBuilder_.clear();
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return BigtableProto
            .internal_static_google_bigtable_v2_ReadChangeStreamResponse_CloseStream_descriptor;
      }

      @Override
      public CloseStream getDefaultInstanceForType() {
        return CloseStream.getDefaultInstance();
      }

      @Override
      public CloseStream build() {
        CloseStream result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public CloseStream buildPartial() {
        CloseStream result = new CloseStream(this);
        int from_bitField0_ = bitField0_;
        if (statusBuilder_ == null) {
          result.status_ = status_;
        } else {
          result.status_ = statusBuilder_.build();
        }
        if (continuationTokensBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            continuationTokens_ = java.util.Collections.unmodifiableList(continuationTokens_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.continuationTokens_ = continuationTokens_;
        } else {
          result.continuationTokens_ = continuationTokensBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }

      @Override
      public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.setField(field, value);
      }

      @Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
        return super.addRepeatedField(field, value);
      }

      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof CloseStream) {
          return mergeFrom((CloseStream) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(CloseStream other) {
        if (other == CloseStream.getDefaultInstance()) return this;
        if (other.hasStatus()) {
          mergeStatus(other.getStatus());
        }
        if (continuationTokensBuilder_ == null) {
          if (!other.continuationTokens_.isEmpty()) {
            if (continuationTokens_.isEmpty()) {
              continuationTokens_ = other.continuationTokens_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureContinuationTokensIsMutable();
              continuationTokens_.addAll(other.continuationTokens_);
            }
            onChanged();
          }
        } else {
          if (!other.continuationTokens_.isEmpty()) {
            if (continuationTokensBuilder_.isEmpty()) {
              continuationTokensBuilder_.dispose();
              continuationTokensBuilder_ = null;
              continuationTokens_ = other.continuationTokens_;
              bitField0_ = (bitField0_ & ~0x00000001);
              continuationTokensBuilder_ =
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                      ? getContinuationTokensFieldBuilder()
                      : null;
            } else {
              continuationTokensBuilder_.addAllMessages(other.continuationTokens_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        CloseStream parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (CloseStream) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private com.google.rpc.Status status_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder>
          statusBuilder_;
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       *
       * @return Whether the status field is set.
       */
      public boolean hasStatus() {
        return statusBuilder_ != null || status_ != null;
      }
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       *
       * @return The status.
       */
      public com.google.rpc.Status getStatus() {
        if (statusBuilder_ == null) {
          return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
        } else {
          return statusBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       */
      public Builder setStatus(com.google.rpc.Status value) {
        if (statusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          status_ = value;
          onChanged();
        } else {
          statusBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       */
      public Builder setStatus(com.google.rpc.Status.Builder builderForValue) {
        if (statusBuilder_ == null) {
          status_ = builderForValue.build();
          onChanged();
        } else {
          statusBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       */
      public Builder mergeStatus(com.google.rpc.Status value) {
        if (statusBuilder_ == null) {
          if (status_ != null) {
            status_ = com.google.rpc.Status.newBuilder(status_).mergeFrom(value).buildPartial();
          } else {
            status_ = value;
          }
          onChanged();
        } else {
          statusBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       */
      public Builder clearStatus() {
        if (statusBuilder_ == null) {
          status_ = null;
          onChanged();
        } else {
          status_ = null;
          statusBuilder_ = null;
        }

        return this;
      }
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       */
      public com.google.rpc.Status.Builder getStatusBuilder() {

        onChanged();
        return getStatusFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       */
      public com.google.rpc.StatusOrBuilder getStatusOrBuilder() {
        if (statusBuilder_ != null) {
          return statusBuilder_.getMessageOrBuilder();
        } else {
          return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
        }
      }
      /**
       *
       *
       * <pre>
       * The status of the stream.
       * </pre>
       *
       * <code>.google.rpc.Status status = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder>
          getStatusFieldBuilder() {
        if (statusBuilder_ == null) {
          statusBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.rpc.Status,
                  com.google.rpc.Status.Builder,
                  com.google.rpc.StatusOrBuilder>(getStatus(), getParentForChildren(), isClean());
          status_ = null;
        }
        return statusBuilder_;
      }

      private java.util.List<StreamContinuationToken> continuationTokens_ =
          java.util.Collections.emptyList();

      private void ensureContinuationTokensIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          continuationTokens_ =
              new java.util.ArrayList<StreamContinuationToken>(continuationTokens_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              StreamContinuationToken,
              StreamContinuationToken.Builder,
              StreamContinuationTokenOrBuilder>
          continuationTokensBuilder_;

      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public java.util.List<StreamContinuationToken> getContinuationTokensList() {
        if (continuationTokensBuilder_ == null) {
          return java.util.Collections.unmodifiableList(continuationTokens_);
        } else {
          return continuationTokensBuilder_.getMessageList();
        }
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public int getContinuationTokensCount() {
        if (continuationTokensBuilder_ == null) {
          return continuationTokens_.size();
        } else {
          return continuationTokensBuilder_.getCount();
        }
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public StreamContinuationToken getContinuationTokens(int index) {
        if (continuationTokensBuilder_ == null) {
          return continuationTokens_.get(index);
        } else {
          return continuationTokensBuilder_.getMessage(index);
        }
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder setContinuationTokens(int index, StreamContinuationToken value) {
        if (continuationTokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContinuationTokensIsMutable();
          continuationTokens_.set(index, value);
          onChanged();
        } else {
          continuationTokensBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder setContinuationTokens(
          int index, StreamContinuationToken.Builder builderForValue) {
        if (continuationTokensBuilder_ == null) {
          ensureContinuationTokensIsMutable();
          continuationTokens_.set(index, builderForValue.build());
          onChanged();
        } else {
          continuationTokensBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder addContinuationTokens(StreamContinuationToken value) {
        if (continuationTokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContinuationTokensIsMutable();
          continuationTokens_.add(value);
          onChanged();
        } else {
          continuationTokensBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder addContinuationTokens(int index, StreamContinuationToken value) {
        if (continuationTokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContinuationTokensIsMutable();
          continuationTokens_.add(index, value);
          onChanged();
        } else {
          continuationTokensBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder addContinuationTokens(StreamContinuationToken.Builder builderForValue) {
        if (continuationTokensBuilder_ == null) {
          ensureContinuationTokensIsMutable();
          continuationTokens_.add(builderForValue.build());
          onChanged();
        } else {
          continuationTokensBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder addContinuationTokens(
          int index, StreamContinuationToken.Builder builderForValue) {
        if (continuationTokensBuilder_ == null) {
          ensureContinuationTokensIsMutable();
          continuationTokens_.add(index, builderForValue.build());
          onChanged();
        } else {
          continuationTokensBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder addAllContinuationTokens(Iterable<? extends StreamContinuationToken> values) {
        if (continuationTokensBuilder_ == null) {
          ensureContinuationTokensIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(values, continuationTokens_);
          onChanged();
        } else {
          continuationTokensBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder clearContinuationTokens() {
        if (continuationTokensBuilder_ == null) {
          continuationTokens_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          continuationTokensBuilder_.clear();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public Builder removeContinuationTokens(int index) {
        if (continuationTokensBuilder_ == null) {
          ensureContinuationTokensIsMutable();
          continuationTokens_.remove(index);
          onChanged();
        } else {
          continuationTokensBuilder_.remove(index);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public StreamContinuationToken.Builder getContinuationTokensBuilder(int index) {
        return getContinuationTokensFieldBuilder().getBuilder(index);
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public StreamContinuationTokenOrBuilder getContinuationTokensOrBuilder(int index) {
        if (continuationTokensBuilder_ == null) {
          return continuationTokens_.get(index);
        } else {
          return continuationTokensBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public java.util.List<? extends StreamContinuationTokenOrBuilder>
          getContinuationTokensOrBuilderList() {
        if (continuationTokensBuilder_ != null) {
          return continuationTokensBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(continuationTokens_);
        }
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public StreamContinuationToken.Builder addContinuationTokensBuilder() {
        return getContinuationTokensFieldBuilder()
            .addBuilder(StreamContinuationToken.getDefaultInstance());
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public StreamContinuationToken.Builder addContinuationTokensBuilder(int index) {
        return getContinuationTokensFieldBuilder()
            .addBuilder(index, StreamContinuationToken.getDefaultInstance());
      }
      /**
       *
       *
       * <pre>
       * If non-empty, contains the information needed to start reading the new
       * partition(s) that contain segments of this partition's row range.
       * </pre>
       *
       * <code>repeated .google.bigtable.v2.StreamContinuationToken continuation_tokens = 2;</code>
       */
      public java.util.List<StreamContinuationToken.Builder> getContinuationTokensBuilderList() {
        return getContinuationTokensFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              StreamContinuationToken,
              StreamContinuationToken.Builder,
              StreamContinuationTokenOrBuilder>
          getContinuationTokensFieldBuilder() {
        if (continuationTokensBuilder_ == null) {
          continuationTokensBuilder_ =
              new com.google.protobuf.RepeatedFieldBuilderV3<
                  StreamContinuationToken,
                  StreamContinuationToken.Builder,
                  StreamContinuationTokenOrBuilder>(
                  continuationTokens_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          continuationTokens_ = null;
        }
        return continuationTokensBuilder_;
      }

      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.bigtable.v2.ReadChangeStreamResponse.CloseStream)
    }

    // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse.CloseStream)
    private static final CloseStream DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new CloseStream();
    }

    public static CloseStream getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CloseStream> PARSER =
        new com.google.protobuf.AbstractParser<CloseStream>() {
          @Override
          public CloseStream parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new CloseStream(input, extensionRegistry);
          }
        };

    public static com.google.protobuf.Parser<CloseStream> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<CloseStream> getParserForType() {
      return PARSER;
    }

    @Override
    public CloseStream getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  private int streamRecordCase_ = 0;
  private Object streamRecord_;

  public enum StreamRecordCase implements com.google.protobuf.Internal.EnumLite, InternalOneOfEnum {
    DATA_CHANGE(1),
    HEARTBEAT(2),
    CLOSE_STREAM(3),
    STREAMRECORD_NOT_SET(0);
    private final int value;

    private StreamRecordCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static StreamRecordCase valueOf(int value) {
      return forNumber(value);
    }

    public static StreamRecordCase forNumber(int value) {
      switch (value) {
        case 1:
          return DATA_CHANGE;
        case 2:
          return HEARTBEAT;
        case 3:
          return CLOSE_STREAM;
        case 0:
          return STREAMRECORD_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public StreamRecordCase getStreamRecordCase() {
    return StreamRecordCase.forNumber(streamRecordCase_);
  }

  public static final int DATA_CHANGE_FIELD_NUMBER = 1;
  /**
   *
   *
   * <pre>
   * A mutation to the partition.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
   *
   * @return Whether the dataChange field is set.
   */
  @Override
  public boolean hasDataChange() {
    return streamRecordCase_ == 1;
  }
  /**
   *
   *
   * <pre>
   * A mutation to the partition.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
   *
   * @return The dataChange.
   */
  @Override
  public DataChange getDataChange() {
    if (streamRecordCase_ == 1) {
      return (DataChange) streamRecord_;
    }
    return DataChange.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * A mutation to the partition.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
   */
  @Override
  public DataChangeOrBuilder getDataChangeOrBuilder() {
    if (streamRecordCase_ == 1) {
      return (DataChange) streamRecord_;
    }
    return DataChange.getDefaultInstance();
  }

  public static final int HEARTBEAT_FIELD_NUMBER = 2;
  /**
   *
   *
   * <pre>
   * A periodic heartbeat message.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
   *
   * @return Whether the heartbeat field is set.
   */
  @Override
  public boolean hasHeartbeat() {
    return streamRecordCase_ == 2;
  }
  /**
   *
   *
   * <pre>
   * A periodic heartbeat message.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
   *
   * @return The heartbeat.
   */
  @Override
  public Heartbeat getHeartbeat() {
    if (streamRecordCase_ == 2) {
      return (Heartbeat) streamRecord_;
    }
    return Heartbeat.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * A periodic heartbeat message.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
   */
  @Override
  public HeartbeatOrBuilder getHeartbeatOrBuilder() {
    if (streamRecordCase_ == 2) {
      return (Heartbeat) streamRecord_;
    }
    return Heartbeat.getDefaultInstance();
  }

  public static final int CLOSE_STREAM_FIELD_NUMBER = 3;
  /**
   *
   *
   * <pre>
   * An indication that the stream should be closed.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
   *
   * @return Whether the closeStream field is set.
   */
  @Override
  public boolean hasCloseStream() {
    return streamRecordCase_ == 3;
  }
  /**
   *
   *
   * <pre>
   * An indication that the stream should be closed.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
   *
   * @return The closeStream.
   */
  @Override
  public CloseStream getCloseStream() {
    if (streamRecordCase_ == 3) {
      return (CloseStream) streamRecord_;
    }
    return CloseStream.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * An indication that the stream should be closed.
   * </pre>
   *
   * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
   */
  @Override
  public CloseStreamOrBuilder getCloseStreamOrBuilder() {
    if (streamRecordCase_ == 3) {
      return (CloseStream) streamRecord_;
    }
    return CloseStream.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;

  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (streamRecordCase_ == 1) {
      output.writeMessage(1, (DataChange) streamRecord_);
    }
    if (streamRecordCase_ == 2) {
      output.writeMessage(2, (Heartbeat) streamRecord_);
    }
    if (streamRecordCase_ == 3) {
      output.writeMessage(3, (CloseStream) streamRecord_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (streamRecordCase_ == 1) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(1, (DataChange) streamRecord_);
    }
    if (streamRecordCase_ == 2) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(2, (Heartbeat) streamRecord_);
    }
    if (streamRecordCase_ == 3) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(3, (CloseStream) streamRecord_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof ReadChangeStreamResponse)) {
      return super.equals(obj);
    }
    ReadChangeStreamResponse other = (ReadChangeStreamResponse) obj;

    if (!getStreamRecordCase().equals(other.getStreamRecordCase())) return false;
    switch (streamRecordCase_) {
      case 1:
        if (!getDataChange().equals(other.getDataChange())) return false;
        break;
      case 2:
        if (!getHeartbeat().equals(other.getHeartbeat())) return false;
        break;
      case 3:
        if (!getCloseStream().equals(other.getCloseStream())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (streamRecordCase_) {
      case 1:
        hash = (37 * hash) + DATA_CHANGE_FIELD_NUMBER;
        hash = (53 * hash) + getDataChange().hashCode();
        break;
      case 2:
        hash = (37 * hash) + HEARTBEAT_FIELD_NUMBER;
        hash = (53 * hash) + getHeartbeat().hashCode();
        break;
      case 3:
        hash = (37 * hash) + CLOSE_STREAM_FIELD_NUMBER;
        hash = (53 * hash) + getCloseStream().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ReadChangeStreamResponse parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static ReadChangeStreamResponse parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static ReadChangeStreamResponse parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static ReadChangeStreamResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static ReadChangeStreamResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static ReadChangeStreamResponse parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static ReadChangeStreamResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static ReadChangeStreamResponse parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static ReadChangeStreamResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static ReadChangeStreamResponse parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static ReadChangeStreamResponse parseFrom(com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static ReadChangeStreamResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(ReadChangeStreamResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * NOTE: This API is not generally available. Users must be allowlisted.
   * Response message for Bigtable.ReadChangeStream.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.v2.ReadChangeStreamResponse}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.v2.ReadChangeStreamResponse)
      ReadChangeStreamResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return BigtableProto.internal_static_google_bigtable_v2_ReadChangeStreamResponse_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return BigtableProto
          .internal_static_google_bigtable_v2_ReadChangeStreamResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(ReadChangeStreamResponse.class, Builder.class);
    }

    // Construct using com.google.bigtable.v2.ReadChangeStreamResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
    }

    @Override
    public Builder clear() {
      super.clear();
      streamRecordCase_ = 0;
      streamRecord_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return BigtableProto.internal_static_google_bigtable_v2_ReadChangeStreamResponse_descriptor;
    }

    @Override
    public ReadChangeStreamResponse getDefaultInstanceForType() {
      return ReadChangeStreamResponse.getDefaultInstance();
    }

    @Override
    public ReadChangeStreamResponse build() {
      ReadChangeStreamResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public ReadChangeStreamResponse buildPartial() {
      ReadChangeStreamResponse result = new ReadChangeStreamResponse(this);
      if (streamRecordCase_ == 1) {
        if (dataChangeBuilder_ == null) {
          result.streamRecord_ = streamRecord_;
        } else {
          result.streamRecord_ = dataChangeBuilder_.build();
        }
      }
      if (streamRecordCase_ == 2) {
        if (heartbeatBuilder_ == null) {
          result.streamRecord_ = streamRecord_;
        } else {
          result.streamRecord_ = heartbeatBuilder_.build();
        }
      }
      if (streamRecordCase_ == 3) {
        if (closeStreamBuilder_ == null) {
          result.streamRecord_ = streamRecord_;
        } else {
          result.streamRecord_ = closeStreamBuilder_.build();
        }
      }
      result.streamRecordCase_ = streamRecordCase_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }

    @Override
    public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
      return super.setField(field, value);
    }

    @Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
      return super.addRepeatedField(field, value);
    }

    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ReadChangeStreamResponse) {
        return mergeFrom((ReadChangeStreamResponse) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ReadChangeStreamResponse other) {
      if (other == ReadChangeStreamResponse.getDefaultInstance()) return this;
      switch (other.getStreamRecordCase()) {
        case DATA_CHANGE:
          {
            mergeDataChange(other.getDataChange());
            break;
          }
        case HEARTBEAT:
          {
            mergeHeartbeat(other.getHeartbeat());
            break;
          }
        case CLOSE_STREAM:
          {
            mergeCloseStream(other.getCloseStream());
            break;
          }
        case STREAMRECORD_NOT_SET:
          {
            break;
          }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ReadChangeStreamResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ReadChangeStreamResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int streamRecordCase_ = 0;
    private Object streamRecord_;

    public StreamRecordCase getStreamRecordCase() {
      return StreamRecordCase.forNumber(streamRecordCase_);
    }

    public Builder clearStreamRecord() {
      streamRecordCase_ = 0;
      streamRecord_ = null;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            DataChange, DataChange.Builder, DataChangeOrBuilder>
        dataChangeBuilder_;
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     *
     * @return Whether the dataChange field is set.
     */
    @Override
    public boolean hasDataChange() {
      return streamRecordCase_ == 1;
    }
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     *
     * @return The dataChange.
     */
    @Override
    public DataChange getDataChange() {
      if (dataChangeBuilder_ == null) {
        if (streamRecordCase_ == 1) {
          return (DataChange) streamRecord_;
        }
        return DataChange.getDefaultInstance();
      } else {
        if (streamRecordCase_ == 1) {
          return dataChangeBuilder_.getMessage();
        }
        return DataChange.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     */
    public Builder setDataChange(DataChange value) {
      if (dataChangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        streamRecord_ = value;
        onChanged();
      } else {
        dataChangeBuilder_.setMessage(value);
      }
      streamRecordCase_ = 1;
      return this;
    }
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     */
    public Builder setDataChange(DataChange.Builder builderForValue) {
      if (dataChangeBuilder_ == null) {
        streamRecord_ = builderForValue.build();
        onChanged();
      } else {
        dataChangeBuilder_.setMessage(builderForValue.build());
      }
      streamRecordCase_ = 1;
      return this;
    }
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     */
    public Builder mergeDataChange(DataChange value) {
      if (dataChangeBuilder_ == null) {
        if (streamRecordCase_ == 1 && streamRecord_ != DataChange.getDefaultInstance()) {
          streamRecord_ =
              DataChange.newBuilder((DataChange) streamRecord_).mergeFrom(value).buildPartial();
        } else {
          streamRecord_ = value;
        }
        onChanged();
      } else {
        if (streamRecordCase_ == 1) {
          dataChangeBuilder_.mergeFrom(value);
        } else {
          dataChangeBuilder_.setMessage(value);
        }
      }
      streamRecordCase_ = 1;
      return this;
    }
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     */
    public Builder clearDataChange() {
      if (dataChangeBuilder_ == null) {
        if (streamRecordCase_ == 1) {
          streamRecordCase_ = 0;
          streamRecord_ = null;
          onChanged();
        }
      } else {
        if (streamRecordCase_ == 1) {
          streamRecordCase_ = 0;
          streamRecord_ = null;
        }
        dataChangeBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     */
    public DataChange.Builder getDataChangeBuilder() {
      return getDataChangeFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     */
    @Override
    public DataChangeOrBuilder getDataChangeOrBuilder() {
      if ((streamRecordCase_ == 1) && (dataChangeBuilder_ != null)) {
        return dataChangeBuilder_.getMessageOrBuilder();
      } else {
        if (streamRecordCase_ == 1) {
          return (DataChange) streamRecord_;
        }
        return DataChange.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * A mutation to the partition.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.DataChange data_change = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            DataChange, DataChange.Builder, DataChangeOrBuilder>
        getDataChangeFieldBuilder() {
      if (dataChangeBuilder_ == null) {
        if (!(streamRecordCase_ == 1)) {
          streamRecord_ = DataChange.getDefaultInstance();
        }
        dataChangeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                DataChange, DataChange.Builder, DataChangeOrBuilder>(
                (DataChange) streamRecord_, getParentForChildren(), isClean());
        streamRecord_ = null;
      }
      streamRecordCase_ = 1;
      onChanged();
      ;
      return dataChangeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            Heartbeat, Heartbeat.Builder, HeartbeatOrBuilder>
        heartbeatBuilder_;
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     *
     * @return Whether the heartbeat field is set.
     */
    @Override
    public boolean hasHeartbeat() {
      return streamRecordCase_ == 2;
    }
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     *
     * @return The heartbeat.
     */
    @Override
    public Heartbeat getHeartbeat() {
      if (heartbeatBuilder_ == null) {
        if (streamRecordCase_ == 2) {
          return (Heartbeat) streamRecord_;
        }
        return Heartbeat.getDefaultInstance();
      } else {
        if (streamRecordCase_ == 2) {
          return heartbeatBuilder_.getMessage();
        }
        return Heartbeat.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     */
    public Builder setHeartbeat(Heartbeat value) {
      if (heartbeatBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        streamRecord_ = value;
        onChanged();
      } else {
        heartbeatBuilder_.setMessage(value);
      }
      streamRecordCase_ = 2;
      return this;
    }
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     */
    public Builder setHeartbeat(Heartbeat.Builder builderForValue) {
      if (heartbeatBuilder_ == null) {
        streamRecord_ = builderForValue.build();
        onChanged();
      } else {
        heartbeatBuilder_.setMessage(builderForValue.build());
      }
      streamRecordCase_ = 2;
      return this;
    }
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     */
    public Builder mergeHeartbeat(Heartbeat value) {
      if (heartbeatBuilder_ == null) {
        if (streamRecordCase_ == 2 && streamRecord_ != Heartbeat.getDefaultInstance()) {
          streamRecord_ =
              Heartbeat.newBuilder((Heartbeat) streamRecord_).mergeFrom(value).buildPartial();
        } else {
          streamRecord_ = value;
        }
        onChanged();
      } else {
        if (streamRecordCase_ == 2) {
          heartbeatBuilder_.mergeFrom(value);
        } else {
          heartbeatBuilder_.setMessage(value);
        }
      }
      streamRecordCase_ = 2;
      return this;
    }
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     */
    public Builder clearHeartbeat() {
      if (heartbeatBuilder_ == null) {
        if (streamRecordCase_ == 2) {
          streamRecordCase_ = 0;
          streamRecord_ = null;
          onChanged();
        }
      } else {
        if (streamRecordCase_ == 2) {
          streamRecordCase_ = 0;
          streamRecord_ = null;
        }
        heartbeatBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     */
    public Heartbeat.Builder getHeartbeatBuilder() {
      return getHeartbeatFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     */
    @Override
    public HeartbeatOrBuilder getHeartbeatOrBuilder() {
      if ((streamRecordCase_ == 2) && (heartbeatBuilder_ != null)) {
        return heartbeatBuilder_.getMessageOrBuilder();
      } else {
        if (streamRecordCase_ == 2) {
          return (Heartbeat) streamRecord_;
        }
        return Heartbeat.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * A periodic heartbeat message.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.Heartbeat heartbeat = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            Heartbeat, Heartbeat.Builder, HeartbeatOrBuilder>
        getHeartbeatFieldBuilder() {
      if (heartbeatBuilder_ == null) {
        if (!(streamRecordCase_ == 2)) {
          streamRecord_ = Heartbeat.getDefaultInstance();
        }
        heartbeatBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                Heartbeat, Heartbeat.Builder, HeartbeatOrBuilder>(
                (Heartbeat) streamRecord_, getParentForChildren(), isClean());
        streamRecord_ = null;
      }
      streamRecordCase_ = 2;
      onChanged();
      ;
      return heartbeatBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            CloseStream, CloseStream.Builder, CloseStreamOrBuilder>
        closeStreamBuilder_;
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     *
     * @return Whether the closeStream field is set.
     */
    @Override
    public boolean hasCloseStream() {
      return streamRecordCase_ == 3;
    }
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     *
     * @return The closeStream.
     */
    @Override
    public CloseStream getCloseStream() {
      if (closeStreamBuilder_ == null) {
        if (streamRecordCase_ == 3) {
          return (CloseStream) streamRecord_;
        }
        return CloseStream.getDefaultInstance();
      } else {
        if (streamRecordCase_ == 3) {
          return closeStreamBuilder_.getMessage();
        }
        return CloseStream.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     */
    public Builder setCloseStream(CloseStream value) {
      if (closeStreamBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        streamRecord_ = value;
        onChanged();
      } else {
        closeStreamBuilder_.setMessage(value);
      }
      streamRecordCase_ = 3;
      return this;
    }
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     */
    public Builder setCloseStream(CloseStream.Builder builderForValue) {
      if (closeStreamBuilder_ == null) {
        streamRecord_ = builderForValue.build();
        onChanged();
      } else {
        closeStreamBuilder_.setMessage(builderForValue.build());
      }
      streamRecordCase_ = 3;
      return this;
    }
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     */
    public Builder mergeCloseStream(CloseStream value) {
      if (closeStreamBuilder_ == null) {
        if (streamRecordCase_ == 3 && streamRecord_ != CloseStream.getDefaultInstance()) {
          streamRecord_ =
              CloseStream.newBuilder((CloseStream) streamRecord_).mergeFrom(value).buildPartial();
        } else {
          streamRecord_ = value;
        }
        onChanged();
      } else {
        if (streamRecordCase_ == 3) {
          closeStreamBuilder_.mergeFrom(value);
        } else {
          closeStreamBuilder_.setMessage(value);
        }
      }
      streamRecordCase_ = 3;
      return this;
    }
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     */
    public Builder clearCloseStream() {
      if (closeStreamBuilder_ == null) {
        if (streamRecordCase_ == 3) {
          streamRecordCase_ = 0;
          streamRecord_ = null;
          onChanged();
        }
      } else {
        if (streamRecordCase_ == 3) {
          streamRecordCase_ = 0;
          streamRecord_ = null;
        }
        closeStreamBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     */
    public CloseStream.Builder getCloseStreamBuilder() {
      return getCloseStreamFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     */
    @Override
    public CloseStreamOrBuilder getCloseStreamOrBuilder() {
      if ((streamRecordCase_ == 3) && (closeStreamBuilder_ != null)) {
        return closeStreamBuilder_.getMessageOrBuilder();
      } else {
        if (streamRecordCase_ == 3) {
          return (CloseStream) streamRecord_;
        }
        return CloseStream.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * An indication that the stream should be closed.
     * </pre>
     *
     * <code>.google.bigtable.v2.ReadChangeStreamResponse.CloseStream close_stream = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            CloseStream, CloseStream.Builder, CloseStreamOrBuilder>
        getCloseStreamFieldBuilder() {
      if (closeStreamBuilder_ == null) {
        if (!(streamRecordCase_ == 3)) {
          streamRecord_ = CloseStream.getDefaultInstance();
        }
        closeStreamBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                CloseStream, CloseStream.Builder, CloseStreamOrBuilder>(
                (CloseStream) streamRecord_, getParentForChildren(), isClean());
        streamRecord_ = null;
      }
      streamRecordCase_ = 3;
      onChanged();
      ;
      return closeStreamBuilder_;
    }

    @Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.bigtable.v2.ReadChangeStreamResponse)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadChangeStreamResponse)
  private static final ReadChangeStreamResponse DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new ReadChangeStreamResponse();
  }

  public static ReadChangeStreamResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReadChangeStreamResponse> PARSER =
      new com.google.protobuf.AbstractParser<ReadChangeStreamResponse>() {
        @Override
        public ReadChangeStreamResponse parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ReadChangeStreamResponse(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<ReadChangeStreamResponse> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ReadChangeStreamResponse> getParserForType() {
    return PARSER;
  }

  @Override
  public ReadChangeStreamResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
